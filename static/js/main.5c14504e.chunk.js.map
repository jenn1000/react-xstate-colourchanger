{"version":3,"sources":["dmAppointment_apply.ts","index.tsx"],"names":["cancel","actions","say","text","send","_context","type","value","listen","help","prompt","name","entry","on","ENDSPEECH","speech","grammar","pokemon","place","grammar2","grammar3","grammar4","grammar_attack","battle","grammar_defend","help_commands","dmMachine","initial","states","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","assign","option","MAXSPEECH","hist","maxspeech","ask","delay","welcome_help","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","nomatch","level_hard","level_easy","pokemon_help","place_help","fight","fight_easy_help","battle1","battle1_help","battle2","battle2_help","lose","win","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"oQAOOA,E,MAAUC,EAAVD,OAEP,SAASE,EAAIC,GACT,OAAOC,aAAMC,IAAD,CAA6BC,KAAM,QAASC,MAAOJ,MAGnE,SAASK,IACL,OAAOJ,YAAK,UAGhB,SAASK,EAAKC,EAAgBC,GAC1B,MAAQ,CAACC,MAAOV,EAAIQ,GACXG,GAAI,CAACC,UAAWH,EAAK,UAGlC,SAASI,EAAOL,GACZ,MAAQ,CAACE,MAAOV,EAAIQ,GACXG,GAAI,CAACC,UAAW,QAuB7B,MAAME,EAAoE,CAGtE,QAAW,CAAEC,QAAS,WACtB,SAAY,CAAEA,QAAS,YACvB,cAAe,CAAEA,QAAS,eAI1B,QAAY,CAAEC,MAAO,mBACrB,cAAa,CAAEA,MAAO,uBACtB,UAAc,CAAEA,MAAO,sBAMrBC,EAAyC,CAE7B,KAAO,EACP,KAAO,EACnB,aAAa,EACD,aAAa,EACb,MAAQ,EACR,MAAQ,EACR,KAAO,EACP,KAAO,EACP,IAAM,EACN,IAAM,EACN,IAAM,EAClB,IAAO,EACK,KAAO,EACP,KAAO,EACnB,UAAU,EACV,UAAW,GAGXC,EAAU,CAAE,MAAS,GACrBC,EAAU,CAAE,aAAgB,EAAI,aAAgB,GAEhDC,EAA0D,CAC5D,OAAW,CAAEC,OAAQ,UACrB,OAAW,CAAEA,OAAQ,WAGnBC,EAAuD,CACzD,QAAY,CAAED,OAAQ,UACtB,QAAY,CAAEA,OAAQ,UACtB,OAAW,CAAEA,OAAQ,UACrB,OAAW,CAAEA,OAAQ,WAGnBE,EAAgB,CAAE,KAAQ,OAAQ,KAAQ,QAGnCC,EAAuD,CAChEC,QAAS,OACTC,OAAQ,CACJC,KAAM,CACFhB,GAAI,CACAiB,MAAO,YAGrBC,QAAS,CACCJ,QAAS,SACTd,GAAI,CACAmB,WAAY,CAAC,CACTC,OAAQ,QACRC,KAAOC,KAAcA,EAAQC,aAAaX,GAC1CxB,QAAS,CAACoC,aAAQF,IAAqB,CAAEG,OAAQH,EAAQC,cAAeC,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,WAG/H,CAACiC,OAAQ,eACTC,KAAOC,GAAYA,EAAQC,aAAaX,IAGxCc,UAAW,CAAC,CACRN,OAAO,aACPC,KAAOC,GAAYf,EAAQ,OAAa,EACxCnB,QAASoC,aAAQF,IAAcf,EAAQ,MAAUA,EAAQ,MAAU,MAEnE,CAACa,OAAQ,gBACTC,KAAOC,GAAYf,EAAQ,MAAY,EACvCnB,QAAQoC,aAAQF,IAAcf,EAAQ,MAAU,QAGxDQ,OAAQ,CACJlB,OAAQ,CACRE,MAAOV,EAAI,qEACXW,GAAI,CAAEC,UAAW,QAGrB0B,KAAM,CAAClC,KAAM,WAEbmC,UAAU,eACH1B,EAAO,0CAGd2B,IAAK,CACD9B,MAAO,CAACJ,IAAUJ,YAAK,YAAa,CAACuC,MAAO,UAKpDC,aAAa,eACNnC,EAAK,8CAA+C,YAIjEoC,MAAO,CACGC,OAAQ,CACJC,GAAI,OACJC,IAAK,CAACb,EAASc,IAAUC,EAAWf,EAAQG,QAC5Ca,OAAQ,CACJlB,OAAQ,OACRhC,QAAS,CAACoC,aAAO,CAACF,EAASc,KAAoB,CAACX,OAAQW,EAAMG,KAAKC,OAAO1C,SAC1E,CAACwB,EAAqBc,IAAeK,QAAQC,IAAIN,EAAMG,MAAOpD,EAAO,WAIzEwD,QAAS,CACLvB,OAAQ,UACRhC,QAAS,CAAC,CAACkC,EAASc,IAAUK,QAAQC,IAAIN,EAAMG,MAAOpD,EAAO,aAK1EyD,KAAM,CACF9B,QAAS,SACTd,GAAI,CACAC,UAAW,CACP,CAAEmB,OAAQ,aAAcC,KAAOC,GAA+B,eAAnBA,EAAQG,QACnD,CAAEL,OAAQ,aAAcC,KAAOC,GAA+B,eAAnBA,EAAQG,UAI3DV,OAAQ,CACJlB,OAAQ,CACJE,MAAOR,aAAM+B,IAAD,CACR7B,KAAM,QACNC,MAAM,aAAD,OAAe4B,EAAQG,OAAvB,wBAIZoB,QAAS,CACN9C,MAAOV,EAAI,+BACXW,GAAI,CAAEC,UAAW,aAK7B6C,WAAY,CACRhC,QAAS,SACTd,GAAI,CAAEC,UAAW,WACjBc,OAAQ,CACJlB,OAAQ,CACJE,MAAOR,aAAM+B,IAAD,CACR7B,KAAM,QACNC,MAAM,gCAOrBqD,WAAY,CACTjC,QAAS,SACTd,GAAI,CAAEC,UAAW,WACjBc,OAAQ,CACJlB,OAAQ,CACJE,MAAOR,aAAM+B,IAAD,CACR7B,KAAM,QACNC,MAAM,gCAKtBU,QAAS,CACLU,QAAS,SACTd,GAAI,CACAmB,WAAY,CAAC,CACTC,OAAQ,QACRC,KAAOC,GAAY,YAAcnB,EAAQmB,EAAQC,YAAc,IAC/DnC,QAAS,CAACoC,aAAQF,IAAqB,CAAElB,QAASD,EAAQmB,EAAQC,WAAWnB,YAAaoB,aAAQF,IAAcf,EAAQ,MAAU,KAAKpB,EAAO,WAKlJ,CAAEiC,OAAQ,WACTC,KAAOC,KAAcA,EAAQC,aAAaX,GAC1CxB,QAASD,EAAO,UAEhB,CAACiC,OAAQ,eACTC,KAAOC,GAAYA,EAAQC,aAAaX,IAExCc,UAAW,CAAC,CAACN,OAAO,aACpBC,KAAOC,GAAYf,EAAQ,OAAa,EACzCnB,QAASoC,aAAQF,IAAcf,EAAQ,MAAUA,EAAQ,MAAU,MACjE,CAACa,OAAQ,gBACXC,KAAOC,GAAYf,EAAQ,MAAY,EACvCnB,QAAQoC,aAAQF,IAAcf,EAAQ,MAAU,QAGpDQ,OAAQ,CACJlB,OAAQ,CACJE,MAAOV,EAAI,8BACXW,GAAI,CAAEC,UAAW,QAErB0B,KAAM,CAAClC,KAAM,WACboC,IAAK,CACD9B,MAAO,CAACJ,IAAUJ,YAAK,YAAa,CAACuC,MAAO,IAAMI,GAAI,YAE1DN,UAAU,eACH1B,EAAO,+CAEd2C,QAAS,CACL9C,MAAOV,EAAI,qCACXW,GAAI,CAAEC,UAAY,aAM9B+C,aAAa,eACNpD,EAAK,oDAAoD,YAGhES,MAAO,CACHS,QAAS,SACTd,GAAI,CACHmB,WAAY,CAAC,CACTE,KAAOC,GAAY,UAAYnB,EAAQmB,EAAQC,YAAc,IAC/DnC,QAAS,CAACoC,aAAQF,IAAqB,CAAEjB,MAAOF,EAAQmB,EAAQC,WAAWlB,UAAWmB,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,UAC1IiC,OAAQ,SAGZ,CAAEA,OAAQ,WACJC,KAAOC,KAAcA,EAAQC,aAAaX,GAC1CxB,QAASD,EAAO,UAChB,CAACiC,OAAQ,aACTC,KAAOC,GAAYA,EAAQC,aAAaX,IACxCc,UAAW,CAAC,CAACN,OAAO,aACpBC,KAAOC,GAAYf,EAAQ,OAAa,EACxCnB,QAASoC,aAAQF,IAAcf,EAAQ,MAAUA,EAAQ,MAAU,MACjE,CAACa,OAAQ,gBACXC,KAAOC,GAAYf,EAAQ,MAAY,EACvCnB,QAAQoC,aAAQF,IAAcf,EAAQ,MAAU,QAGpDQ,OAAQ,CACJlB,OAAQ,CACJE,MAAOR,aAAM+B,IAAD,CACR7B,KAAM,QACNC,MAAM,cAAD,OAAgB4B,EAAQlB,QAAxB,+DAEfJ,GAAI,CAAEC,UAAW,QAEf0B,KAAM,CAAClC,KAAM,WACnBoC,IAAK,CACD9B,MAAO,CAACJ,IAAUJ,YAAK,YAAa,CAACuC,MAAO,IAAMI,GAAI,YAEpDN,UAAU,eACN1B,EAAO,wDAEjB2C,QAAS,CACL9C,MAAOV,EAAI,oEACXW,GAAI,CAAEC,UAAW,aAKvBgD,WAAW,eACJrD,EAAK,wCAAwC,UAGvDsD,MAAO,CACFpC,QAAS,SACTd,GAAI,CACGmB,WAAY,CAAC,CACfE,KAAO,CAAEC,IAA4C,IAAhChB,EAASgB,EAAQC,aAA/B,CAAuDD,GAA+B,eAAnBA,EAAQG,QACzEL,OAAQ,UACRhC,QAAS,CAACoC,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,WAC7D,CACAkC,KAAO,CAAEC,IAA4C,IAAhChB,EAASgB,EAAQC,aAA/B,CAAuDD,GAA+B,eAAnBA,EAAQG,QAClFL,OAAQ,UACRhC,QAAS,CAACoC,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,WAE/E,CACAkC,KAAOC,IAA4C,IAAhChB,EAASgB,EAAQC,WACpCH,OAAQ,QACUhC,QAAS,CAACoC,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,WAIpE,CAAEiC,OAAQ,WACPC,KAAOC,KAAcA,EAAQC,aAAaX,GAC1CxB,QAASD,EAAO,UAChB,CAACiC,OAAQ,kBACTC,KAAOC,GAAYA,EAAQC,aAAaX,IAExCc,UAAW,CAAC,CAACN,OAAO,aACpBC,KAAOC,GAAYf,EAAQ,OAAa,EACxCnB,QAASoC,aAAQF,IAAcf,EAAQ,MAAUA,EAAQ,MAAU,MAEnE,CAACa,OAAQ,gBACTC,KAAOC,GAAYf,EAAQ,MAAY,EACvCnB,QAAQoC,aAAQF,IAAcf,EAAQ,MAAU,QAG1DQ,OAAQ,CACJlB,OAAQ,CACPE,MAAOR,aAAM+B,IAAD,CACR7B,KAAM,QACfC,MAAM,GAAD,OAAK4B,EAAQjB,MAAb,yEAEAL,GAAI,CAAEC,UAAW,QAGZ0B,KAAM,CAAClC,KAAM,WAEboC,IAAK,CACP9B,MAAO,CAACJ,IAAUJ,YAAK,YAAa,CAACuC,MAAO,IAAMI,GAAI,YAGpDN,UAAU,eACL1B,EAAO,qBAGZ2C,QAAS,CACd9C,MAAOV,EAAI,gCACRW,GAAI,CAAEC,UAAW,aAKvBkD,gBAAgB,eACTvD,EAAK,8CAA8C,UAG1DwD,QAAS,CACLtC,QAAS,SACTd,GAAI,CACAmB,WAAY,CAKX,CACIE,KAAQC,GAAYd,EAAQ,aAAmB,EAC/CY,OAAQ,MACRhC,QAAS,CAACoC,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,WACjE,CACIkC,KAAQC,GAAYd,EAAQ,aAAmB,EAC/CY,OAAQ,OACRhC,QAAS,CAACoC,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,WAKjE,CACIkC,KAAOC,GAAY,WAAab,EAAea,EAAQC,YAAc,IACrEH,OAAQ,UACRhC,QAAS,CAACoC,aAAQF,IAAcd,EAAQ,aAAiBA,EAAQ,aAAiB,KAAIrB,EAAO,WAEjG,CACIkC,KAAOC,GAAY,WAAaX,EAAeW,EAAQC,YAAc,IACrEH,OAAQ,UACRhC,QAAS,CAACoC,aAAQF,IAAcd,EAAQ,aAAiBA,EAAQ,aAAiB,KAAIrB,EAAO,WAGjG,CAAEiC,OAAQ,WACVC,KAAOC,KAAcA,EAAQC,aAAaX,GAC1CxB,QAASD,EAAO,UAEhB,CAACiC,OAAQ,eACTC,KAAOC,GAAYA,EAAQC,aAAaX,IAExCc,UAAW,CAAC,CAACN,OAAO,aACpBC,KAAOC,GAAYf,EAAQ,OAAa,EACxCnB,QAASoC,aAAQF,IAAcf,EAAQ,MAAUA,EAAQ,MAAU,MAEnE,CAACa,OAAQ,gBACTC,KAAOC,GAAYf,EAAQ,MAAY,EACvCnB,QAAQoC,aAAQF,IAAcf,EAAQ,MAAU,QAEpDQ,OAAQ,CACJlB,OAAQ,CACJE,MAAOR,aAAM+B,IAAD,CACR7B,KAAM,QACNC,MAAM,sDAEVM,GAAI,CAAEC,UAAW,QAGrB0B,KAAM,CAAClC,KAAM,WAEboC,IAAK,CACD9B,MAAO,CAACJ,IAAUJ,YAAK,YAAa,CAACuC,MAAO,IAAMI,GAAI,YAG1DN,UAAU,eACF1B,EAAO,qFAEf2C,QAAS,CACL9C,MAAOV,EAAI,4BACXW,GAAI,CAAEC,UAAW,aAK7BoD,aAAa,eACPzD,EAAK,wCAAwC,YAGpD0D,QAAS,CACRxC,QAAS,SACNd,GAAI,CACHmB,WAAY,CAKL,CACIE,KAAQC,GAAYd,EAAQ,cAAoB,EAChDY,OAAQ,OACRhC,QAAS,CAACoC,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,WACjE,CACIkC,KAAQC,GAAYd,EAAQ,cAAoB,EAChDY,OAAQ,MACRhC,QAAS,CAACoC,aAAQF,IAAcf,EAAQ,MAAU,KAAIpB,EAAO,WAKjE,CACIkC,KAAOC,GAAY,WAAab,EAAea,EAAQC,YAAc,IACrEH,OAAQ,UACRhC,QAAS,CAACoC,aAAQF,IAAcd,EAAQ,aAAiBA,EAAQ,aAAiB,KAAIrB,EAAO,WAEjG,CACIkC,KAAOC,GAAY,WAAaX,EAAeW,EAAQC,YAAc,IACrEH,OAAQ,UACRhC,QAAS,CAACoC,aAAQF,IAAcd,EAAQ,aAAiBA,EAAQ,aAAiB,KAAIrB,EAAO,WAGvG,CAAEiC,OAAQ,WACJC,KAAOC,KAAcA,EAAQC,aAAaX,GAC1CxB,QAASD,EAAO,UAEhB,CAACiC,OAAQ,eACTC,KAAOC,GAAYA,EAAQC,aAAaX,IAExCc,UAAW,CAAC,CAACN,OAAO,aACpBC,KAAOC,GAAYf,EAAQ,OAAa,EACxCnB,QAASoC,aAAQF,IAAcf,EAAQ,MAAUA,EAAQ,MAAU,MAEnE,CAACa,OAAQ,gBACTC,KAAOC,GAAYf,EAAQ,MAAY,EACvCnB,QAAQoC,aAAQF,IAAcf,EAAQ,MAAU,QAE1DQ,OAAQ,CACJlB,OAAQ,CACPE,MAAOR,aAAM+B,IAAD,CACR7B,KAAM,QACrBC,MAAM,sDAEcM,GAAI,CAAEC,UAAW,QAGrB0B,KAAM,CAAClC,KAAM,WAEboC,IAAK,CACV9B,MAAO,CAACJ,IAAUJ,YAAK,YAAa,CAACuC,MAAO,IAAMI,GAAI,YAGjDN,UAAU,eACF1B,EAAO,qFAEf2C,QAAS,CACd9C,MAAOV,EAAI,4BACXW,GAAI,CAAEC,UAAW,aAKpBsD,aAAa,eACN3D,EAAK,wCAAwC,YAGpD4D,KAAM,CACF1C,QAAS,SACLd,GAAI,CAAEC,UAAW,QACbc,OAAQ,CACJlB,OAAQ,CAAEE,MAAOV,EAAI,kDAErCoE,IAAK,CACD3C,QAAS,SACLd,GAAI,CAAEC,UAAW,QACjBc,OAAQ,CACRlB,OAAQ,CAAEE,MAAOV,EAAI,oDAWvCgD,EAAc/C,GAChBoE,MAAM,IAAIC,QAAQC,yFAAoB,CAClCC,OAAQ,OACRC,QAAS,CAAE,OAAU,oDACrBC,KAAK,aAAD,OAAezE,EAAf,SAEH0E,MAAKzB,GAAQA,EAAK0B,S,oBC1iB3BC,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAMZ,MAAMC,EAAUC,YAAmC,CAC/CpC,GAAI,OACJzC,KAAM,WACNsB,OAAQ,CACJwD,GAAG,eACI1D,GAEP2D,OAAQ,CACJ1D,QAAS,OACTC,OAAQ,CACJ0D,KAAM,CACFzE,GAAI,CACA0E,OAAQ,cACRC,MAAO,CACHvD,OAAQ,WACRhC,QAASoC,aAAO,CAAChC,EAAU4C,KAAmB,CAAEwC,UAAWxC,EAAM1C,aAI7EmF,YAAa,CACT/D,QAAS,WACTf,MAAO,WACP+E,KAAM,UACN9E,GAAI,CACA+E,UAAW,CACP3F,QAAS,CAAC,eACNoC,aAAO,CAAChC,EAAU4C,KAAmB,CAAEb,UAAWa,EAAM1C,WAC5D0B,OAAQ,UAEZD,WAAY,OACjCO,UAAW,QAEMX,OAAQ,CACJiE,SAAU,GAEVC,MAAO,CACHlF,MAAOR,YAAK,iBAIxB2F,SAAU,CACNnF,MAAO,WACPC,GAAI,CACAC,UAAW,aAO/B,CACIb,QAAS,CACL+F,aAAe7D,IAEXmB,QAAQC,IAAI,WAAapB,EAAQC,YAErC6D,KAAM,KACF3C,QAAQC,IAAI,SAEhB2C,UAAY/D,IAERmB,QAAQC,IAAI,kBAAoBpB,EAAQgE,QAAQ9C,OAAO1C,UAUjEyF,EAAkBC,IACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAElB,OAAQ,gBAC/B,OACI,gDAAQ/E,KAAK,SAASkG,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAElB,OAAQ,aAC/B,OACI,gDAAQ/E,KAAK,SAASkG,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,QACI,OACI,gDAAQ/F,KAAK,SAASkG,UAAU,iBAAoBH,GAApD,iCAOhB,SAASM,IAAO,MAAD,EACyBC,6BAAmB,CACnDC,MAAO,KACHzG,EAAK,gBAFL0G,EADG,EACHA,MAAO9G,EADJ,EACIA,OADJ,KACY+F,SAKagB,+BAAqB,CACrDC,SAAWC,IACP7G,EAAK,CAAEE,KAAM,YAAaC,MAAO0G,QAFjCzG,EANG,EAMHA,OAAmB0G,GANhB,EAMKC,UANL,EAMgBD,MANhB,EAWsBE,YAAWlC,EAAS,CACjDmC,UAAU,EACVpH,QAAS,CACLqH,SAAUC,aAAS,KACfjE,QAAQC,IAAI,qCACZ/C,EAAO,CACHgH,gBAAgB,EAChBC,YAAY,OAGpBC,QAASH,aAAS,KACdjE,QAAQC,IAAI,wBACZ2D,OAEJS,aAAcJ,aAAUpF,IACpBmB,QAAQC,IAAI,iBACZqE,SAAShD,KAAK6B,MAAMoB,WAAa1F,EAAQC,aAE7C0F,SAAUP,aAAS,CAACpF,EAAS4F,KACzBzE,QAAQC,IAAI,eACZuD,EAAM,CAAE3G,KAAMgC,EAAQsD,eAE1BuC,UAAWT,aAAS,CAACpF,EAAS4F,KAC1BzE,QAAQC,IAAI,eACZvD,UAnCD,mBAWJiI,EAXI,KAWK7H,EAXL,UA6CX,OACI,qBAAKoG,UAAU,MAAf,SACI,cAACJ,EAAD,CAAgBE,MAAO2B,EAASC,QAAS,IAAM9H,EAAK,aAShE,MAUM+H,EAAcP,SAASQ,eAAe,QAC5CC,SACI,cAAC1B,EAAD,IACAwB,K","file":"static/js/main.5c14504e.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel} = actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction help(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nfunction promptAndAsk(prompt: string, prompt_a:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist : {type: \"history\"},\n            maxspeech: {\n                ...speech(prompt_a)\n            },\n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 6000})]\n            },\n        }})\n}\n\n\nconst grammar: { [index: string]: { pokemon?: string, place?: string} } = {\n\n    //name of example pokemon \n    \"Pikachu\": { pokemon: \"Pikachu\" },\n    \"Slowking\": { pokemon: \"Slowking\" },\n    \"Mister Mime\": { pokemon: \"Mister Mime\" },\n\n\n    //region or real life country \n    \"Uppsala\" : { place: \"Uppsala, Sweden\" },\n    \"Göteborg\" : { place: \"Göteborg, Sweden\" },\n    \"Stockholm\" : { place: \"Stockholm, Sweden\" }\n\n\n}\n\n\nconst grammar2 : { [index: string]: boolean }= { \n\n                  \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n                  \"okay\": true,\n                  \"Okay\": true,\n                  \"Yup\": true,\n                  \"yup\": true,\n                  \"Ja\": true,\n                  \"ja\": true,\n                  \"No\": false,\n\t\t\t\t  \"no\" : false,\n                  \"Nej\": false,\n                  \"nej\": false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\n\nconst grammar3 ={ \"count\": 0 }\nconst grammar4 ={ \"attack_count\": 0 , \"defend_count\": 0 }\nconst grammar5 = { \"attack_count\": 0 , \"defend_count\": 0 }\nconst grammar_attack: { [index: string]: { battle?: string} } = {\n    \"attack\" : { battle: \"Attack\"},\n    \"Attack\" : { battle: \"Attack\"} }\n    \n\nconst grammar_defend: {[index: string]: {battle?: string}} = {\n    \"defense\" : { battle: \"Defend\"},\n    \"Defense\" : { battle: \"Defend\"},\n    \"Defend\" : { battle: \"Defend\"},\n    \"defend\" : { battle: \"Defend\"}}\n\n\nconst help_commands = { \"help\": \"Help\", \"Help\": \"Help\" }\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in help_commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                },\n\n                {target: \"welcome_help\",\n                cond: (context) => context.recResult in help_commands}], \n                \n\n                MAXSPEECH: [{\n                    target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                    },\n                    {target: \"#root.dm.init\", \n                    cond: (context) => grammar3[\"count\"] > 2, \n                    actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n\n            states: {        \n                prompt: {\n                entry: say(\"Welcome to the world of Pokemon. Select your level. Easy or hard.\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n\n            hist: {type: \"history\"},\n\n            maxspeech: {\n                ...speech(\"Please, respond by selecting a level.\")\n        },  \n\n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 6000})]\n            }\n        }   \n    }, \n    \n        welcome_help:{\n            ...help(\"This is Pokemon. Please, select your level.\", \"welcome\")\n            \n        },\n\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data), cancel(\"maxsp\")]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: [(context, event) => console.log(event.data), cancel(\"maxsp\")]\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"level_easy\", cond: (context) => context.option === \"level_easy\" },\n                    { target: \"level_hard\", cond: (context) => context.option === \"level_hard\" }\n                ]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `You chose ${context.option}. Great choice.`\n                    })),\n        },\n\n                 nomatch: {\n                    entry: say(\"Sorry, please repeat again.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n        level_hard: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"pokemon\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Time to get a pokemon.`\n                    }))\n                }}\n                    },\n        \n        \n        \n         level_easy: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"pokemon\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Time to get a pokemon.`\n                    }))\n                }}\n        },\n\n        pokemon: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"place\",\n                    cond: (context) => \"pokemon\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { pokemon: grammar[context.recResult].pokemon } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    \n\n                },\n\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in help_commands),\n                 actions: cancel(\"maxsp\")},\n\n                 {target: \"pokemon_help\",\n                 cond: (context) => context.recResult in help_commands}],\n                 \n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n\n            states: {\n                prompt: {\n                    entry: say(\"Which Pokemon do you want?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n                },\n                maxspeech: {\n                    ...speech(\"Please respond, which pokemon do you want?\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know that Pokemon.\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n\n        pokemon_help:{\n            ...help(\"Please, tell me the name of the pokemon you want.\",\"pokemon\")\n        },\n\n        place: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"place\" in (grammar[context.recResult] || {}),\n\t\t             actions: [assign((context) => { return { place: grammar[context.recResult].place } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"fight\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in help_commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"place_help\",\n                cond: (context) => context.recResult in help_commands}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Excellent! ${context.pokemon} is your pokemon now. What region do you want to go to?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"Please, respond. Which region do you want to go to?\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry, I don't know which region or place you are talking about.\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n        place_help:{\n            ...help(\"Please, tell me where you want to go.\",\"place\")\n        },\n        \n\t    fight: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (((context) => grammar2[context.recResult] === true)&&((context) => context.option === \"level_easy\")),\n                        target: \"battle1\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n                        {\n                        cond: (((context) => grammar2[context.recResult] === true)&&((context) => context.option === \"level_hard\")),\n                        target: \"battle2\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n                        \n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"place\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\n\t\t            },\n\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in help_commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"fight_easy_help\",\n                    cond: (context) => context.recResult in help_commands}],\n                    \n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                    },\n                    {target: \"#root.dm.init\", \n                    cond: (context) => grammar3[\"count\"] > 2, \n                    actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `${context.place} is full of wild Pokemon! Do you want to try and catch a Pokemon?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\n                    hist: {type: \"history\"},\n\t\t            \n                    ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t\t            },\n                    \n                    maxspeech: {\n                      ...speech(\"Please, respond.\")\n                    },\n\t\t            \n                    nomatch: {\n\t\t\t            entry: say(\"Please, answer the question.\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            \n            fight_easy_help:{\n                ...help(\"Please, answer the question with yes or no.\",\"fight\")\n            },\n            \n            battle1: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [\n                     // { \n                     //     cond: ((((context) => grammar4[\"attack_count\"] === 2 ) && ((context) => grammar4['defend_count'] === 0)) || ((((context)=> grammar4['attack_count'] === 0)) && ((context)=> grammar4['defend_count']===2))),\n                     //     target: \"lose\",\n                     //     actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]} ,\n                     { \n                         cond: ((context) => grammar4[\"attack_count\"] > 1 ),\n                         target: \"win\",\n                         actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]} ,\n                     { \n                         cond: ((context) => grammar4['defend_count'] > 1 ),\n                         target: \"lose\",\n                         actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]} ,\n                     // {\n                     //     cond: (((context) => grammar4['attack_count']=== 1) && ((context) => grammar4['defend_count']===1)),\n                     //     target: \"win\",\n                     //     actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},   \n                     {\n                         cond: (context) => \"battle\" in (grammar_attack[context.recResult] || {}),    \n                         target: \"battle1\",\n                         actions: [assign((context) => { grammar4[\"attack_count\"]=grammar4['attack_count']+1}),cancel(\"maxsp\")] \n                     },\n                     {\n                         cond: (context) => \"battle\" in (grammar_defend[context.recResult] || {}),    \n                         target: \"battle1\",\n                         actions: [assign((context) => { grammar4[\"defend_count\"]=grammar4['defend_count']+1}),cancel(\"maxsp\")]\n                     },\n\n                     { target: \".nomatch\",\n                     cond: (context) => !(context.recResult in help_commands),\n                     actions: cancel(\"maxsp\")},\n                     \n                     {target: \"battle1_help\",\n                     cond: (context) => context.recResult in help_commands}],\n\n                     MAXSPEECH: [{target:\".maxspeech\",\n                     cond: (context) => grammar3[\"count\"] <= 2,\n                     actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                     },\n                     {target: \"#root.dm.init\", \n                     cond: (context) => grammar3[\"count\"] > 2, \n                     actions:assign((context) => { grammar3[\"count\"]=0})}]  \n                 },\n                 states: {\n                     prompt: {\n                         entry: send((context) => ({\n                             type: \"SPEAK\",\n                             value: ` Let's fight! Do you want to attack or defend?.`\n                         })),\n                         on: { ENDSPEECH: \"ask\" }\n                     },\n\n                     hist: {type: \"history\"},\n                     \n                     ask: {\n                         entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n                     },\n\n                     maxspeech: {\n                          ...speech(\"Please, respond or lose all chances of capturing this Pokemon. Attack or defend?\")},\n                     \n                     nomatch: {\n                         entry: say(\"Please, repeat it again.\"),\n                         on: { ENDSPEECH: \"prompt\" }\n                     }\n                 }\n             },\n\n             battle1_help:{\n                ...help(\"Select your action! Attack or defend!\",\"battle1\")\n            },\n\n            battle2: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [\n\t\t\t\t\t\t// { \n                        //     cond: ((((context) => grammar4[\"attack_count\"] === 2 ) && ((context) => grammar4['defend_count'] === 0)) || ((((context)=> grammar4['attack_count'] === 0)) && ((context)=> grammar4['defend_count']===2))),\n                        //     target: \"lose\",\n                        //     actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]} ,\n                        { \n                            cond: ((context) => grammar4[\"attack_count\"] >= 2 ),\n                            target: \"lose\",\n                            actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]} ,\n                        { \n                            cond: ((context) => grammar4['defend_count'] >= 3 ),\n                            target: \"win\",\n                            actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]} ,\n                        // {\n                        //     cond: (((context) => grammar4['attack_count']=== 1) && ((context) => grammar4['defend_count']===1)),\n                        //     target: \"win\",\n                        //     actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},   \n                        {\n                            cond: (context) => \"battle\" in (grammar_attack[context.recResult] || {}),    \n                            target: \"battle2\",\n                            actions: [assign((context) => { grammar4[\"attack_count\"]=grammar4['attack_count']+1}),cancel(\"maxsp\")] \n\t\t                },\n                        {\n                            cond: (context) => \"battle\" in (grammar_defend[context.recResult] || {}),    \n                            target: \"battle2\",\n                            actions: [assign((context) => { grammar4[\"defend_count\"]=grammar4['defend_count']+1}),cancel(\"maxsp\")]\n                        },\n\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in help_commands),\n                        actions: cancel(\"maxsp\")},\n                        \n                        {target: \"battle2_help\",\n                        cond: (context) => context.recResult in help_commands}],\n\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                        actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                        },\n                        {target: \"#root.dm.init\", \n                        cond: (context) => grammar3[\"count\"] > 2, \n                        actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: ` Let's fight! Do you want to attack or defend?.`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\n                        hist: {type: \"history\"},\n\t\t                \n                        ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t\t                },\n\n                        maxspeech: {\n                             ...speech(\"Please, respond or lose all chances of capturing this Pokemon. Attack or defend?\")},\n\t\t                \n                        nomatch: {\n\t\t\t                entry: say(\"Please, repeat it again.\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n\n                battle2_help:{\n                    ...help(\"Select your action! Attack or defend!\",\"battle2\")\n                },\n\n                lose: {\n                    initial: \"prompt\",\n                        on: { ENDSPEECH: \"init\" },\n                            states: {\n                                prompt: { entry: say(\"You lost! Failed to catch the wild Pokemon!\")\n                                }}\t},\n                win: {\n                    initial: \"prompt\",\n                        on: { ENDSPEECH: \"init\" },\n                        states: {\n                        prompt: { entry: say(\"Congratualtions, you caught a wild Pokemon!\")}\n                            }\n                        }\t    \n                } } \n            )\n\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://appointment--app.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment_apply\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n\t\t\tMAXSPEECH: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Begin Battle\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://pokemonoj.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}