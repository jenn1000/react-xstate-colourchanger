{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["cancel","actions","say","text","send","_context","type","value","listen","help","prompt","name","entry","on","ENDSPEECH","speech","grammar","person","day","time","grammar2","grammar3","dmMachine","initial","states","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","commands","assign","option","MAXSPEECH","hist","maxspeech1","ask","delay","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","todo","timer","appointment","who","maxspeech2","nomatch","help2","maxspeech3","help3","wholeday","maxspeech4","help4","timefixed","maxspeech5","help5","settime","maxspeech6","help6","withtime","maxspeech7","help7","Finished","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.49976824.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\n\r\nconst {cancel} = actions\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction promptAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: [listen(), send('MAXSPEECH', {delay: 4000})]\r\n            },\r\n        }})\r\n}\r\n\r\nfunction help(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\r\n    return ({entry: say(prompt),\r\n             on: {ENDSPEECH: name+\".hist\"}})\r\n}\r\n\r\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\r\n    return ({entry: say(prompt),\r\n            on: {ENDSPEECH: \"ask\"\r\n        }})\r\n}\r\n\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Smith\": { person: \"Smith John\" },\r\n    \"Tom\": { person: \"Tom Smith\" },\r\n    \"David\": { person: \"David Smith\" },\r\n    \"Emma\": { person: \"Emma James\" },\r\n    \"Eric\": { person: \"Eric James\" },\r\n    \"Alex\": { person: \"Alex James\" },\r\n\r\n\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\" : { day: \"Thursday\" },\r\n    \"on Friday\" : { day: \"Friday\" },\r\n    \"on Saturday\" : { day: \"Saturday\" },\r\n    \"on Sunday\" : { day: \"Sunday\" },\r\n    \r\n    \"at one\" : { time: \"01:00\" },\r\n    \"at two\" : { time: \"02:00\" },\r\n    \"at three\" : { time: \"03:00\"},\r\n    \"at four\": { time: \"04:00\" },\r\n    \"at five\": { time: \"05:00\" },\r\n    \"at six\": { time: \"06:00\" },\r\n    \"at seven\": { time: \"07:00\" },\r\n    \"at eight\": { time: \"08:00\" },\r\n    \"at nine\": { time: \"09:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"at twelve\": { time: \"12:00\" },\r\n    \"at thirteen\": { time: \"13:00\" },\r\n    \"at fourteen\": { time: \"14:00\" },\r\n    \"at fifteen\": { time: \"15:00\" },\r\n    \"at sixteen\": { time: \"16:00\" },\r\n    \"at seventeen\": { time: \"17:00\" },\r\n    \"at eighteen\": { time: \"18:00\" },\r\n    \"at nineteen\": { time: \"19:00\" },\r\n    \"at twenty\": { time: \"20:00\" },\r\n    \"at twenty one\": { time: \"21:00\" },\r\n    \"at twenty two\": { time: \"22:00\" },\r\n    \"at twenty three\": { time: \"23:00\" },\r\n    \"at twenty four\": { time: \"00:00\" }\r\n}\r\n\r\n\r\nconst grammar2 : { [index: string]: boolean } =\r\n\r\n{ \r\n    \r\n    \"yes\": true,\r\n    \"of course\": true, \r\n    \"Absolutely\": true,\r\n    \"Sounds great\": true,\r\n    \"yeah sure\": true,\r\n    \"no\" : false,\r\n    \"No way\" : false\r\n}\r\n\r\nconst grammar3 = {\"count\": 0}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init:{\r\n            on: {\r\n                CLICK: 'welcome'\r\n                }\r\n             },\r\n\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    target: \"query\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: assign((context) => { return { option: context.recResult } }),\r\n                  \r\n            },\r\n            {target: \"help_1\",\r\n            cond: (context)=> context.recResult in commands}],\r\n            MAXSPEECH: [{target: \"welcome.maxspeech1\",\r\n            cond:(context)=> grammar3[\"count\"] <= 2,\r\n            actions: assign((context)=>{grammar3[\"count\"]=grammar3[\"count\"]+1})\r\n            },{target:\"#root.dm.init\",\r\n            cond: (context) => grammar3[\"count\"] > 2,\r\n            actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n                   \r\n        },\r\n\r\n        states: {\r\n            prompt: {\r\n                entry: say(\"What would you like to do?\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            hist: {type: \"history\"},\r\n                maxspeech1: {\r\n                    ...speech(\"Please respond. What would you like to do?\")\r\n                },\r\n            ask: {\r\n                entry: [listen(), send('MAXSPEECH', {delay: 4000})]\r\n            }\r\n        }\r\n    },\r\n    \r\n    help1: {\r\n        ...help(\"If you want a make an appointment, tell me what you want to do\", \"welcome\")\r\n    },\r\n\r\n    query: {\r\n            invoke: {\r\n            \r\n            id: 'rasa',\r\n            src: (context, event) => nluRequest(context.option),\r\n            onDone: {\r\n                target: 'menu',\r\n                actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\r\n                (context: SDSContext, event: any) => console.log(event.data)]\r\n            },\r\n            onError: {\r\n                target: 'welcome',\r\n                actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n            }\r\n        },\r\n        menu: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                ENDSPEECH: [\r\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\r\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\r\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\r\n                ]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. I see. you chose ${context.option}.`\r\n                    })),\r\n        },\r\n                //  nomatch: {\r\n                //     entry: say(\"Sorry, I don't understand\"),\r\n                //     on: { ENDSPEECH: \"prompt\" }\r\n        } \r\n                \r\n        },\r\n\r\n\r\n        todo: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create a to do item`\r\n                    }))\r\n                }}\r\n        },\r\n        \r\n        timer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create a timer`\r\n                    }))\r\n                }}\r\n        },\r\n        \r\n        \r\n        appointment: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create an appointment`\r\n                    }))\r\n                }}\r\n        },\r\n\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n                    },\r\n\r\n                { target: \".nomatch\",\r\n                cond : (context) => !(context.recResult in commands),\r\n                actions: cancel(\"maxsp\")},\r\n                { target: \"help2\",\r\n                cond: (context) => context.recResult in commands}],\r\n                MAXSPEECH: [{target: \"who.maxspeech2\",\r\n                cond: (context) => grammar3[\"count\"] <= 2,\r\n                actions: assign((context)=> {grammar3[\"count\"]= grammar3[\"count\"]+1})\r\n                }, {target: \"#root.dm.init\",\r\n                cond: (context) => grammar3[\"count\"] > 2,\r\n                actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n            },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                hist: {type: \"history\"},\r\n                ask: {\r\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id:\"maxsp\"})]\r\n                },\r\n                maxspeech2: {\r\n                    ...speech(\"Please respond. What would you like to do?\")\r\n                },\r\n                \r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        help2: {\r\n            ...help(\"Tell me the name\", \"who\")\r\n        },\r\n\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n\t            RECOGNISED: [{\r\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n\t\t            target: \"wholeday\"\r\n                },\t\r\n\r\n\t\t            { target: \".nomatch\" ,\r\n                    cond: (context)=> !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help3\",\r\n                    cond: (context)=> context.recResult in commands}],\r\n                    MAXSPEECH: [{target: \"day.maxspeech3\",\r\n                    cond: (context) => grammar3[\"count\"] <=2,\r\n                    actions: assign((context) => {grammar3[\"count\"]=grammar3[\"count\"]+1})\r\n                    }, {target: \"#root.dm.init\",\r\n                    cond: (context)=> grammar3[\"count\"]> 2,\r\n                    actions: assign((context) => {grammar3[\"count\"]=0})}]\r\n                },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`\r\n                    })),\r\n\t\t            on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                hist:{type:\"history\"},\r\n\t\t        ask: {\r\n\t\t            entry: [listen(), send('MAXSPEECH', {delay:4000, id:\"maxsp\"})]\r\n\t            },\r\n                maxspeech3:{\r\n                    ...speech(\"Please respond. Tell me the day\")\r\n                },\r\n                nomatch: {\r\n\t\t            entry: say(\"Sorry, I don't know which day you are talking about\"),\r\n\t\t            on: { ENDSPEECH: \"prompt\" }\r\n\t            }\t     \r\n            }\r\n        },\r\n\r\n        help3:{\r\n            ...help(\"Tell me the day\", \"day\")\r\n        },\r\n\r\n\t    wholeday:  {\r\n\t\t        initial: \"prompt\",\r\n\t\t        on: {\r\n\t                RECOGNISED: [{\r\n                        cond: (context) => grammar2[context.recResult] === true,\r\n                        target: \"timefixed\"},\r\n\r\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\r\n\t\t\t\t\t\ttarget: \"settime\"},\r\n\r\n\t                { target: \".nomatch\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help4\",\r\n                    cond: (context) => context.recResult in commands}],\r\n                    MAXSPEECH: [{target: \"wholeday.maxspeech4\",\r\n                    cond: (context) => grammar3[\"count\"] <= 2,\r\n                    actions: assign((context) => {grammar3[\"count\"]= grammar3[\"count\"]+1})\r\n                },{target: \"#root.dm.init\",\r\n                cond: (context) => grammar3[\"count\"] >2,\r\n                actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n                    \r\n                },\r\n                \r\n                states: {\r\n\t\t            prompt: {\r\n\t\t\t            entry: send((context) => ({\r\n\t\t\t                type: \"SPEAK\",\r\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\r\n\t\t\t            })),\r\n\t\t\t            on: { ENDSPEECH: \"ask\" }\r\n\t\t            },\r\n                    hist: {type: \"history\"},\r\n\t\t            ask: {\r\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\r\n\t\t            },\r\n                    \r\n                    maxspeech4: {\r\n                        ...speech(\"Please respond. Would it take the whole day?\")\r\n                    },\r\n\r\n\t\t            nomatch: {\r\n\t\t\t            entry: say(\"Please repeat it again\"),\r\n\t\t                on: { ENDSPEECH: \"prompt\" }\r\n\t\t            }\r\n\t\t        }\t     \r\n        },\r\n        \r\n        help4:{\r\n            ...help(\"Tell me if it would take whole day for the meeting\", \"wholeday\")\r\n        },\r\n        timefixed: {\r\n\t\t           initial: \"prompt\",\r\n\r\n\t               on: {\r\n\t\t               RECOGNISED: [{\r\n                        cond: (context) => grammar2[context.recResult] === true,\r\n                        target: \"Finished\"},\r\n                        {\r\n                         cond: (context) => grammar2[context.recResult] === false,\r\n                        target: \"who\"\r\n                        \r\n                     },\r\n                     { target: \".nomatch\",\r\n                     cond: (context) => !(context.recResult in commands),\r\n                     actions: cancel(\"maxsp\")},\r\n                     {target: \"help5\",\r\n                     cond: (context) => context.recResult in commands}],\r\n                     MAXSPEECH: [{target:\"timefixed.maxspeech5\",\r\n                     cond: (context) => grammar3[\"count\"] <= 2,\r\n             actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n             },{target: \"#root.dm.init\", \r\n             cond: (context) => grammar3[\"count\"] > 2, \r\n             actions:assign((context) => { grammar3[\"count\"]=0})}]  \r\n                 },\r\n\t\t            states: {\r\n\t\t                prompt: {\r\n\t\t\t                entry: send((context) => ({\r\n\t\t\t                    type: \"SPEAK\",\r\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n\t\t                },\r\n                        hist:{type: \"history\"},\r\n\t\t                ask: {\r\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t                },\r\n                        maxspeech5: {\r\n                            ...speech(\"Please confirm the meeting schedule.\")\r\n                        },\r\n\r\n\t\t                nomatch: {\r\n\t\t\t                entry: say(\"Please repeat it again\"),\r\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\r\n\t\t                }\r\n                    }\r\n\t        },\r\n            help5: {\r\n                ...help(\"Please confirm the meeting schedule\", \"timefixed\")\r\n            },\r\n\r\n\t\t\tsettime: {\r\n                initial: \"prompt\",\r\n\t\t\t\t\ton: {\r\n\t\t\t\t\t\tRECOGNISED: [{\r\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\r\n\t\t\t\t\t\t\ttarget: \"withtime\"\r\n\t\t\t\t\t\t    },\r\n\r\n\t\t\t\t\t\t    { target: \".nomatch\" ,\r\n                        cond: (context) => !(context.recResult in commands),\r\n                        actions: cancel(\"maxsp\")},\r\n                        {target: \"help6\",\r\n                        cond: (context) => context.recResult in commands}],\r\n                        MAXSPEECH: [{target:\"settime.maxspeech6\",\r\n                        cond: (context) => grammar3[\"count\"] <= 2,\r\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n                },{target: \"#root.dm.init\", \r\n                cond: (context) => grammar3[\"count\"] > 2, \r\n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \r\n\t\t\t\t\t},\r\n                states: {\r\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\r\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\r\n\t\t\t\t\t    },\r\n                        hist: {type: \"history\"},\r\n                        ask: \r\n                    {\r\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t\t\t    },\r\n                    maxspeech6: {\r\n                        ...speech(\"Please respond. Set a time.\")\r\n                    },\r\n\r\n\t\t\t\tnomatch:{\r\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\r\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\r\n\t\t\t\t}}},\r\n\r\n                help6:{\r\n                    ...help(\"Please tell me what time the meeting is held\", \"settime\")\r\n                },\r\n\r\n\r\n\t\twithtime: {\r\n\t\t\tinitial: \"prompt\",\r\n\t\t\ton: {\r\n\t\t\t\tRECOGNISED: [{ \r\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\r\n\t\t\t\t\ttarget: \"Finished\"},\r\n\t\t\t\t\t{\r\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\r\n\t\t\t\t\ttarget: \"who\"\r\n\t\t\t\t    },\r\n                    { target: \".nomatch\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help7\",\r\n                    cond: (context) => context.recResult in commands}],\r\n                    MAXSPEECH: [{target:\"withtime.maxspeech7\",\r\n                    cond: (context) => grammar3[\"count\"] <= 2,\r\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n                    },{target: \"#root.dm.init\", \r\n                    cond: (context) => grammar3[\"count\"] > 2, \r\n                    actions:assign((context) => { grammar3[\"count\"]=0})}] \r\n\t\t\t },\r\n\r\n\t\t\t states: {\r\n\t\t\t\t prompt: {\r\n\t\t\t\t\t entry: send((context) => ({\r\n\t\t\t\t\t\t type: \"SPEAK\",\r\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\r\n\t\t\t\t\t })),\r\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\r\n\t\t\t\t },\r\n                 hist: {type: \"history\"},\r\n                ask: {\r\n                    entry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t\t\t},\r\n                maxspeech7: {\r\n                    ...speech(\"Please respond. Confirm the meeting.\")\r\n                },\r\n\r\n\t\t\t\tnomatch: {\r\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\r\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n\t\t\t}\r\n\t\t},\r\n        help7: {\r\n            ...help(\"Please confirm the meeting information.\", \"withtime\")\r\n        },\r\n\r\n                Finished: \r\n                \r\n                {\r\n\t\t                 initial: \"prompt\",\r\n\t\t                 on: { ENDSPEECH: \"init\" },\r\n\t\t                 states: {\r\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\r\n                            },\r\n\t                    }\r\n\t            }\t    \r\n    }\r\n\r\n})\r\n\r\n\r\n\r\n/*RASA API*/\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://appointment--app.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}