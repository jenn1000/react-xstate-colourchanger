{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","grammar2","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","wholeday","timefixed","settime","withtime","Finished","inspect","url","iframe","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"+PAGA,SAASA,EAAIC,GACT,OAAOC,aAAMC,IAAD,CAA6BC,KAAM,QAASC,MAAOJ,MAGnE,SAASK,IACL,OAAOJ,YAAK,UAGhB,MAAMK,EAAiF,CAEnF,OAAU,CAAEC,OAAQ,kBACpB,MAAS,CAAEA,OAAQ,cACnB,KAAQ,CAAEA,OAAQ,aAClB,MAAS,CAAEA,OAAQ,eACnB,KAAQ,CAAEA,OAAQ,cAClB,KAAQ,CAAEA,OAAQ,gBAGlB,YAAa,CAAEC,IAAK,UACpB,aAAc,CAAEA,IAAK,WACrB,eAAgB,CAAEA,IAAK,aACvB,cAAgB,CAAEA,IAAK,YACvB,YAAc,CAAEA,IAAK,UACrB,cAAgB,CAAEA,IAAK,YACvB,YAAc,CAAEA,IAAK,UAErB,SAAW,CAAEC,KAAM,SACnB,SAAW,CAAEA,KAAM,SACnB,WAAa,CAAEA,KAAM,SACrB,UAAW,CAAEA,KAAM,SACnB,UAAW,CAAEA,KAAM,SACnB,SAAU,CAAEA,KAAM,SAClB,WAAY,CAAEA,KAAM,SACpB,WAAY,CAAEA,KAAM,SACpB,UAAW,CAAEA,KAAM,SACnB,SAAU,CAAEA,KAAM,SAClB,YAAa,CAAEA,KAAM,SACrB,YAAa,CAAEA,KAAM,SACrB,cAAe,CAAEA,KAAM,SACvB,cAAe,CAAEA,KAAM,SACvB,aAAc,CAAEA,KAAM,SACtB,aAAc,CAAEA,KAAM,SACtB,eAAgB,CAAEA,KAAM,SACxB,cAAe,CAAEA,KAAM,SACvB,cAAe,CAAEA,KAAM,SACvB,YAAa,CAAEA,KAAM,SACrB,gBAAiB,CAAEA,KAAM,SACzB,gBAAiB,CAAEA,KAAM,SACzB,kBAAmB,CAAEA,KAAM,SAC3B,iBAAkB,CAAEA,KAAM,UAIxBC,EAEN,CAEI,KAAO,EACP,aAAa,EACb,YAAc,EACd,gBAAgB,EAChB,aAAa,EACb,IAAO,EACP,UAAW,GAGFC,EAEZ,CACGC,QAAS,OACTC,OAEA,CACIC,KAAK,CACDC,GAAI,CACAC,MAAO,YAIfC,QACA,CACIL,QAAS,SACTG,GAAI,CAAEG,UAAW,OACjBL,OACA,CACIM,OAAQ,CAAEC,MAAOrB,EAAI,kCAI7BsB,IAEA,CACIT,QAAS,SACTG,GACA,CACIO,WACA,CACI,CACAC,KAAOC,GAAY,WAAalB,EAAQkB,EAAQC,YAAc,IAC9DC,QAASC,aAAQH,IAAqB,CAAEjB,OAAQD,EAAQkB,EAAQC,WAAWlB,WAC3EqB,OAAQ,OAEZ,CAAEA,OAAQ,cAIdf,OAEA,CACIM,OAEA,CACIC,MAAOrB,EAAI,6BACXgB,GAAI,CAAEG,UAAW,QAGrBW,IAEA,CACIT,MAAOf,KAGXyB,QAEA,CACIV,MAAOrB,EAAI,2BACXgB,GAAI,CAAEG,UAAW,aAK7BV,IAEA,CACII,QAAS,SACTG,GAEA,CACCO,WACG,CACI,CACHC,KAAOC,GAAY,QAAUlB,EAAQkB,EAAQC,YAAc,IAC9DC,QAASC,aAAQH,IAAqB,CAAEhB,IAAKF,EAAQkB,EAAQC,WAAWjB,QACxEoB,OAAQ,YAIR,CAAEA,OAAQ,cAKZf,OAEA,CACIM,OAEA,CACIC,MAAOnB,aAAMuB,IAAD,CACRrB,KAAM,QACNC,MAAM,OAAD,OAASoB,EAAQjB,OAAjB,uCAEfQ,GAAI,CAAEG,UAAW,QAErBW,IAEM,CACFT,MAAOf,KAGXyB,QAEM,CACFV,MAAOrB,EAAI,sDACXgB,GAAI,CAAEG,UAAW,aAM1Ba,SAEG,CACEnB,QAAS,SACTG,GAEM,CACCO,WAEG,CACI,CAACC,KAAOC,IAA4C,IAAhCd,EAASc,EAAQC,WACrCG,OAAQ,aAE1B,CAACL,KAAOC,IAA4C,IAAhCd,EAASc,EAAQC,WACrCG,OAAQ,WAEG,CAAEA,OAAQ,cAMjBf,OAEM,CACFM,OAEM,CACLC,MAAOnB,aAAMuB,IAAD,CACRrB,KAAM,QACfC,MAAM,2BAAD,OAA6BoB,EAAQhB,IAArC,qCAEAO,GAAI,CAAEG,UAAW,QAGlBW,IAAK,CACDT,MAAOf,KAGXyB,QAEM,CACLV,MAAOrB,EAAI,0BACRgB,GAAI,CAAEG,UAAW,aAMvBc,UAEA,CACCpB,QAAS,SAENG,GAEG,CACFO,WAEM,CACI,CAACC,KAAOC,IAA4C,IAAhCd,EAASc,EAAQC,WAC9CG,OAAQ,YACjB,CAACL,KAAOC,IAA4C,IAAhCd,EAASc,EAAQC,WACnBG,OAAQ,OACd,CAAEA,OAAQ,cAMjBf,OAEM,CACFM,OAEM,CACLC,MAAOnB,aAAMuB,IAAD,CACRrB,KAAM,QACrBC,MAAM,sDAAD,OAAwDoB,EAAQjB,OAAhE,eAA6EiB,EAAQhB,IAArF,0BAEeO,GAAI,CAAEG,UAAW,QAI3BW,IAEM,CACLT,MAAOf,KAGRyB,QAEM,CACLV,MAAOrB,EAAI,0BACXgB,GAAI,CAAEG,UAAW,aAKjCe,QAEiB,CAEXrB,QAAS,SACTG,GAEW,CACdO,WACkB,CACI,CAEAC,KAAOC,GAAY,SAAWlB,EAAQkB,EAAQC,YAAc,IACjFC,QAASC,aAAQH,IAAqB,CAAEf,KAAMH,EAAQkB,EAAQC,WAAWhB,SACzEmB,OAAQ,YAIL,CAAEA,OAAQ,cAKXf,OAEe,CACdM,OAAQ,CAAEC,MAAOrB,EAAI,6BACrBgB,GAAI,CAAEG,UAAW,QAGtBW,IACe,CACdT,MAAOf,KAGTyB,QAEY,CACXV,MAAOrB,EAAI,0BACXgB,GAAI,CAAEG,UAAW,aAOpBgB,SAEM,CACLtB,QAAS,SACTG,GAES,CACRO,WACY,CAEI,CACfC,KAAOC,IAA4C,IAAhCd,EAASc,EAAQC,WACpCG,OAAQ,YAER,CACAL,KAAOC,IAA4C,IAAhCd,EAASc,EAAQC,WACpCG,OAAQ,OAEL,CAAEA,OAAQ,cAKdf,OAEQ,CACPM,OAEY,CACXC,MAAOnB,aAAMuB,IAAD,CACXrB,KAAM,QACNC,MAAM,sDAAD,OAAwDoB,EAAQjB,OAAhE,eAA6EiB,EAAQhB,IAArF,eAA+FgB,EAAQf,KAAvG,SAENM,GAAI,CAAEG,UAAW,QAGlBW,IACW,CACVT,MAAOf,KAGRyB,QAEY,CACXV,MAAOrB,EAAI,0BACXgB,GAAI,CAAEG,UAAW,aAKPiB,SAEA,CACGvB,QAAS,SACTG,GAAI,CAAEG,UAAW,QACjBL,OACK,CACJM,OAAQ,CAAEC,MAAOrB,EAAI,2C,oBCxXzCqC,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAMZ,MAAMC,EAAUC,YAAmC,CAC/CC,GAAI,OACJtC,KAAM,WACNU,OAAQ,CACJ6B,GAAG,eACI/B,GAEPgC,OAAQ,CACJ/B,QAAS,OACTC,OAAQ,CACJ+B,KAAM,CACF7B,GAAI,CACA8B,OAAQ,cACRC,MAAO,CACHlB,OAAQ,WACRF,QAASC,aAAO,CAACzB,EAAU6C,KAAmB,CAAEC,UAAWD,EAAM3C,aAI7E6C,YAAa,CACvBrC,QAAS,WACKQ,MAAO,WACP8B,KAAM,UACNnC,GAAI,CACAoC,UAAW,CACPzB,QAAS,CAAC,eACNC,aAAO,CAACzB,EAAU6C,KAAmB,CAAEtB,UAAWsB,EAAM3C,WAC5DwB,OAAQ,UAEZN,WAAY,QAEhBT,OAAQ,CACrBuC,SAAU,GAEOC,MAAO,CACHjC,MAAOnB,YAAK,iBAIxBqD,SAAU,CACNlC,MAAO,WACPL,GAAI,CACAG,UAAW,aAO/B,CACIQ,QAAS,CACL6B,aAAe/B,IAEXgC,QAAQC,IAAI,WAAajC,EAAQC,YAErCiC,KAAM,KACFF,QAAQC,IAAI,SAEhBE,UAAYnC,IAERgC,QAAQC,IAAI,kBAAoBjC,EAAQoC,QAAQC,OAAOC,UAUjEC,EAAkBC,IACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAEvB,OAAQ,gBAC/B,OACI,gDAAQxC,KAAK,SAASgE,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAEvB,OAAQ,aAC/B,OACI,gDAAQxC,KAAK,SAASgE,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,QACI,OACI,gDAAQ7D,KAAK,SAASgE,UAAU,iBAAoBH,GAApD,mCAOhB,SAASM,IAAO,MAAD,EACyBC,6BAAmB,CACnDC,MAAO,KACHvE,EAAK,gBAFLwE,EADG,EACHA,MAAOC,EADJ,EACIA,OADJ,KACYpB,SAKaqB,+BAAqB,CACrDC,SAAWC,IACP5E,EAAK,CAAEE,KAAM,YAAaC,MAAOyE,QAFjCxE,EANG,EAMHA,OAAmByE,GANhB,EAMKC,UANL,EAMgBD,MANhB,EAWsBE,YAAWzC,EAAS,CACjD0C,UAAU,EACVvD,QAAS,CACLwD,SAAUC,aAAS,KACf3B,QAAQC,IAAI,qCACZpD,EAAO,CACH+E,gBAAgB,EAChBC,YAAY,OAGpBC,QAASH,aAAS,KACd3B,QAAQC,IAAI,wBACZqB,OAEJS,aAAcJ,aAAU3D,IACpBgC,QAAQC,IAAI,iBACZ+B,SAASC,KAAKrB,MAAMsB,WAAalE,EAAQC,aAE7CkE,SAAUR,aAAS,CAAC3D,EAASoE,KACzBpC,QAAQC,IAAI,eACZgB,EAAM,CAAEzE,KAAMwB,EAAQwB,eAE1B6C,UAAWV,aAAS,CAAC3D,EAASoE,KAC1BpC,QAAQC,IAAI,eACZiB,UAnCD,mBAWJoB,EAXI,KAWK7F,EAXL,UA6CX,OACI,qBAAKkE,UAAU,MAAf,SACI,cAACJ,EAAD,CAAgBE,MAAO6B,EAASC,QAAS,IAAM9F,EAAK,aAShE,MAUM+F,EAAcR,SAASS,eAAe,QAC5CC,SACI,cAAC5B,EAAD,IACA0B,K","file":"static/js/main.0854d539.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n\r\n    \"Gustav\": { person: \"John Appleseed\" },\r\n    \"Johan\": { person: \"Smith John\" },\r\n    \"Olaf\": { person: \"Tom Smith\" },\r\n    \"David\": { person: \"James Smith\" },\r\n    \"Emma\": { person: \"Alex James\" },\r\n    \"Eric\": { person: \"Claire James\"},\r\n\r\n\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\" : { day: \"Thursday\" },\r\n    \"on Friday\" : { day: \"Friday\" },\r\n    \"on Saturday\" : { day: \"Saturday\" },\r\n    \"on Sunday\" : { day: \"Sunday\" },\r\n    \r\n    \"at one\" : { time: \"01:00\" },\r\n    \"at two\" : { time: \"02:00\" },\r\n    \"at three\" : { time: \"03:00\"},\r\n    \"at four\": { time: \"04:00\" },\r\n    \"at five\": { time: \"05:00\" },\r\n    \"at six\": { time: \"06:00\" },\r\n    \"at seven\": { time: \"07:00\" },\r\n    \"at eight\": { time: \"08:00\" },\r\n    \"at nine\": { time: \"09:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"at twelve\": { time: \"12:00\" },\r\n    \"at thirteen\": { time: \"13:00\" },\r\n    \"at fourteen\": { time: \"14:00\" },\r\n    \"at fifteen\": { time: \"15:00\" },\r\n    \"at sixteen\": { time: \"16:00\" },\r\n    \"at seventeen\": { time: \"17:00\" },\r\n    \"at eighteen\": { time: \"18:00\" },\r\n    \"at nineteen\": { time: \"19:00\" },\r\n    \"at twenty\": { time: \"20:00\" },\r\n    \"at twenty one\": { time: \"21:00\" },\r\n    \"at twenty two\": { time: \"22:00\" },\r\n    \"at twenty three\": { time: \"23:00\" },\r\n    \"at twenty four\": { time: \"00:00\" }\r\n}\r\n\r\n\r\nconst grammar2 =\r\n\r\n{ \r\n    \r\n    \"Yes\": true,\r\n    \"of course\": true, \r\n    \"Absolutely\": true,\r\n    \"Sounds great\": true,\r\n    \"yeah sure\": true,\r\n    \"No\" : false,\r\n    \"No way\" : false\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = \r\n\r\n({\r\n    initial: 'init',\r\n    states: \r\n    \r\n    {\r\n        init:{\r\n            on: {\r\n                CLICK: 'welcome'\r\n                }\r\n             },\r\n\r\n        welcome: \r\n        {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: \r\n            {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n\r\n        who: \r\n        \r\n        {\r\n            initial: \"prompt\",\r\n            on: \r\n            {\r\n                RECOGNISED: \r\n                [\r\n                    {\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n                    },\r\n                { target: \".nomatch\" }\r\n                ]\r\n            },\r\n\r\n            states: \r\n            \r\n            {\r\n                prompt: \r\n                \r\n                {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                \r\n                ask: \r\n                \r\n                {\r\n                    entry: listen()\r\n                },\r\n                \r\n                nomatch: \r\n                \r\n                {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n\r\n        day: \r\n        \r\n        {\r\n            initial: \"prompt\",\r\n            on: \r\n            \r\n            {\r\n\t            RECOGNISED: \r\n                [\r\n                    {\r\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n\t\t            target: \"wholeday\"\r\n\r\n\t\t            },\t\r\n\r\n\t\t            { target: \".nomatch\" }\r\n                \r\n                ]\r\n\t        },\r\n\r\n            states: \r\n\r\n            {\r\n                prompt: \r\n                \r\n                {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`\r\n                    })),\r\n\t\t            on: { ENDSPEECH: \"ask\" }\r\n                },\r\n\t\t        ask: \r\n                \r\n                {\r\n\t\t            entry: listen()\r\n\t            },\r\n\r\n\t\t        nomatch: \r\n                \r\n                {\r\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\r\n\t\t            on: { ENDSPEECH: \"prompt\" }\r\n\t            }\t     \r\n            }\r\n        },\r\n\r\n\r\n\t    wholeday: \r\n        \r\n        {\r\n\t\t        initial: \"prompt\",\r\n\t\t        on: \r\n                \r\n                {\r\n\t                RECOGNISED: \r\n                    \r\n                    [\r\n                        {cond: (context) => grammar2[context.recResult] === true,\r\n                        target: \"timefixed\"},\r\n\r\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\r\n\t\t\t\t\t\ttarget: \"settime\"},\r\n\r\n\t                { target: \".nomatch\" }\r\n                    ]\r\n\t\t        \r\n                },\r\n\r\n\r\n\t\t        states: \r\n                \r\n                {\r\n\t\t            prompt: \r\n                    \r\n                    {\r\n\t\t\t            entry: send((context) => ({\r\n\t\t\t                type: \"SPEAK\",\r\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\r\n\t\t\t            })),\r\n\t\t\t            on: { ENDSPEECH: \"ask\" }\r\n\t\t            },\r\n\r\n\t\t            ask: {\r\n\t\t                entry: listen()\r\n\t\t            },\r\n\r\n\t\t            nomatch: \r\n\r\n                    {\r\n\t\t\t            entry: say(\"Please repeat it again\"),\r\n\t\t                on: { ENDSPEECH: \"prompt\" }\r\n\t\t            }\r\n\t\t        }\t     \r\n        },\r\n\r\n\r\n            timefixed: \r\n            \r\n            {\r\n\t\t           initial: \"prompt\",\r\n\r\n\t               on: \r\n                   \r\n                   {\r\n\t\t               RECOGNISED: \r\n                       \r\n                       [\r\n                           {cond: (context) => grammar2[context.recResult] === true,\r\n\t\t\t               target: \"Finished\"},\r\n\t\t\t\t\t\t   {cond: (context) => grammar2[context.recResult] === false,\r\n                           target: \"who\"},\r\n\t\t                   { target: \".nomatch\" }\r\n                        ]\r\n\t\t            },\r\n\r\n\r\n\r\n\t\t            states: \r\n                    \r\n                    {\r\n\t\t                prompt: \r\n                        \r\n                        {\r\n\t\t\t                entry: send((context) => ({\r\n\t\t\t                    type: \"SPEAK\",\r\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n\t\t                },\r\n\r\n\r\n\t\t                ask: \r\n                        \r\n                        {\r\n\t\t\t                entry: listen()\r\n\t\t                },\r\n\r\n\t\t                nomatch: \r\n                        \r\n                        {\r\n\t\t\t                entry: say(\"Please repeat it again\"),\r\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\r\n\t\t                }\r\n                    }\r\n\t        },\r\n\r\n\t\t\tsettime: \r\n                \r\n                    {\r\n\r\n\t\t\t\t\t    initial: \"prompt\",\r\n\t\t\t\t\t    on: \r\n                    \r\n                    {\r\n\t\t\t\t\t\tRECOGNISED: \r\n                        [\r\n                            {\r\n\t\t\t\t\t\t\t\r\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\r\n\t\t\t\t\t\t\ttarget: \"withtime\"\r\n\r\n\t\t\t\t\t\t    },\r\n\r\n\t\t\t\t\t\t    { target: \".nomatch\" }\r\n                        ]\r\n\t\t\t\t\t},\r\n\r\n\r\n\t\t\t\t\t    states: \r\n\r\n                        {\r\n\t\t\t\t\t\t    prompt: { entry: say(\"What time is your meeting\"),\r\n\t\t\t\t\t\t    on: { ENDSPEECH: \"ask\" }\r\n\t\t\t\t\t    },\r\n\r\n\t\t\t\t\task: \r\n                    {\r\n\t\t\t\t\t\tentry: listen()\r\n\t\t\t\t    },\r\n\r\n\t\t\t\tnomatch:\r\n                \r\n                {\r\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\r\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\r\n\t\t\t\t}\r\n\t\t\t            }\r\n\t\t                \r\n                    },\r\n\r\n\r\n\t\twithtime: \r\n        \r\n        {\r\n\t\t\tinitial: \"prompt\",\r\n\t\t\ton: \r\n            \r\n            {\r\n\t\t\t\tRECOGNISED: \r\n                [\r\n                    \r\n                    { \r\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\r\n\t\t\t\t\ttarget: \"Finished\"\r\n                    },\r\n\t\t\t\t\t{\r\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\r\n\t\t\t\t\ttarget: \"who\"\r\n\t\t\t\t    },\r\n\t\t\t\t    { target: \".nomatch\" }\r\n                ]\r\n\t\t\t},\r\n\r\n\r\n\t\t\t states: \r\n             \r\n            {\r\n\t\t\t\t prompt: \r\n                 \r\n                 {\r\n\t\t\t\t\t entry: send((context) => ({\r\n\t\t\t\t\t\t type: \"SPEAK\",\r\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\r\n\t\t\t\t\t })),\r\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\r\n\t\t\t\t },\r\n\r\n\t\t\t\t ask: \r\n                {\r\n\t\t\t\t\t entry: listen()\r\n\t\t\t\t},\r\n\r\n\t\t\t\t nomatch: \r\n                 \r\n                 {\r\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\r\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\r\n\t\t\t\t }\r\n\t\t\t}\r\n\t\t},\r\n\r\n                Finished: \r\n                \r\n                {\r\n\t\t                 initial: \"prompt\",\r\n\t\t                 on: { ENDSPEECH: \"init\" },\r\n\t\t                 states: \r\n                        {\r\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")},\r\n\t                    }\r\n\t            }\t    \r\n    }\r\n\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}