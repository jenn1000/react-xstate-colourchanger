{"version":3,"sources":["chartparser.js","runparser.js","grammars/dmHome.ts","dmSmartHome.ts","index.tsx","srgs.js"],"names":["LOG","str","clone","obj","temp","constructor","key","isEmpty","ob","i","hasOwnProperty","Chart","numberOfWords","this","passives","Array","actives","add","edge","subchart","cat","isPassive","start","lhs","end","next","content","resultsForRule","results","finalEdges","push","out","allEdges","allPassiveEdges","concat","allActiveEdges","edges","j","k","statistics","length","nrEdges","nrPassiveEdges","nrActiveEdges","PassiveEdge","_string","toString","ActiveEdge","rest","rules","text","parse","words","grammar","root","filter","$root","chart","agenda","leftCornerFilter","addToChart","inference","rhs","slice","SRGS","min","max","oneof","eval","undefined","ruleref","position","leftCorners","pop","active","join","ref","passive","processRuleExpansions","xrule","xitems","childNodes","rule","nodeType","textContent","trim","split","nodeName","uri","getAttribute","repeat","r","parseInt","Infinity","console","log","gram","dom","DOMParser","parseFromString","ActiveXObject","doc","XML","newDocument","loadXML","url","encodeURIComponent","request","XMLHttpRequest","open","send","responseXML","parseXML","getElementsByTagName","xrules","loadGrammar","parsing","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","cond","context","recResult","target","actions","assign","option","prompt","entry","_context","type","value","ENDSPEECH","ask","promptAndAsk","returnobject","combine","object","action","inspect","iframe","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM","Grammar","VOID","OneOf","NULL","GARBAGE","$check","checkSequenceExpansion","err","throwRuleError","Ref","RefClass","Tag","tag","TagClass","alternatives","OneOfClass","Repeat","sequence","RepeatClass","message","error","TypeError","String","checkExpansion","prototype","Number"],"mappings":"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","file":"static/js/main.7d3b52c2.chunk.js","sourcesContent":["//\r\n//  chartparser.js\r\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\r\n//\r\n/*\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU Lesser General Public License as published \r\n  by the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n  \r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n  \r\n  You should have received a copy of the GNU General Public License\r\n  and the GNU Lesser General Public License along with this program.  \r\n  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/* Mods by Torbjörn\r\n- Removed the toString() method from Object. Why does it still work?\r\n- Added a text variable (similar to rules). See \r\n*/\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// a logging function\r\n//  - uncomment if you want to debug the parsing process\r\nfunction LOG(str) {\r\n  //console.log(\"\" + str);\r\n}\r\n\r\nimport * as SRGS from './srgs'\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// we need to be able to clone objects between different edges\r\n// borrowed from http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone\r\nfunction clone(obj){\r\n  if (obj == null || typeof(obj) != 'object') {\r\n    return obj;\r\n  }\r\n  var temp = new obj.constructor(); \r\n  for (var key in obj) {\r\n    temp[key] = clone(obj[key]);\r\n  }\r\n  return temp;\r\n}\r\n\r\n\r\nfunction isEmpty(ob){\r\n   for (var i in ob) { if(ob.hasOwnProperty(i)) {return false;}}\r\n  return true;\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// parse chart\r\n// conceptually this is a set of edges, but it is optimized\r\nfunction Chart(numberOfWords) {\r\n  this.numberOfWords = numberOfWords;\r\n  this.passives = new Array(numberOfWords);\r\n  this.actives = new Array(numberOfWords);\r\n  for (var i = 0; i <= numberOfWords; i++) {\r\n    this.passives[i] = {};\r\n    this.actives[i] = {};\r\n  }\r\n\r\n  // Chart.add(edge)\r\n  // add the edge to the chart, return true if the chart was changed \r\n  // (i.e. if the chart didn't already contain the edge)\r\n  this.add = function add(edge) {\r\n    var subchart, cat;\r\n    if (edge.isPassive) {\r\n      subchart = this.passives[edge.start];\r\n      cat = edge.lhs;\r\n    } else {\r\n      subchart = this.actives[edge.end];\r\n      cat = edge.next.content;\r\n    }\r\n    if (!(cat in subchart)) {\r\n      subchart[cat] = {};\r\n    }\r\n    if (edge in subchart[cat]) {\r\n      return false;\r\n    } else {\r\n      subchart[cat][edge] = edge;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Chart.resultsForRule(lhs, start, end)\r\n  // return all parse results for the given lhs, start, and end\r\n  //  - start, end are optional; defaults to 0, numberOfWords\r\n  this.resultsForRule = function resultsForRule(lhs, start, end) {\r\n    start = start || 0;\r\n    end = end || numberOfWords;\r\n    var results = [];\r\n    var finalEdges = this.passives[start][lhs];\r\n    for (var i in finalEdges) {\r\n      if (finalEdges[i].end == end) {\r\n\tresults.push(finalEdges[i].out);\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n  \r\n  // Chart.allEdges() / Chart.allPassiveEdges() / Chart.allActiveEdges()\r\n  // return an array of all (passive/active) edges in the chart\r\n  this.allEdges = function allEdges() {\r\n    return this.allPassiveEdges().concat(this.allActiveEdges());\r\n  }\r\n  this.allPassiveEdges = function allPassiveEdges() {\r\n    var edges = [];\r\n    for (var i in this.passives) \r\n      for (var j in this.passives[i]) \r\n\tfor (var k in this.passives[i][j])\r\n\t  edges.push(this.passives[i][j][k]);\r\n    return edges;\r\n  }\r\n  this.allActiveEdges = function allActiveEdges() {\r\n    var edges = [];\r\n    for (var i in this.actives) \r\n      for (var j in this.actives[i]) \r\n\tfor (var k in this.actives[i][j])\r\n\t  edges.push(this.actives[i][j][k]);\r\n    return edges;\r\n  }\r\n\r\n  // Chart.statistics()\r\n  // return the number of edges in the chart\r\n  this.statistics = function statistics() {\r\n    var passives = this.allPassiveEdges().length;\r\n    var actives = this.allActiveEdges().length;\r\n    return {nrEdges: passives+actives, nrPassiveEdges: passives, nrActiveEdges: actives};\r\n  }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// parse edges: passive and active\r\n\r\nfunction PassiveEdge(start, end, lhs, out) {\r\n  this.start = start;\r\n  this.end = end;\r\n  this.lhs = lhs;\r\n  this.out = out;\r\n  this.isPassive = true;\r\n\r\n  var str = \"[\" + start + \"-\" + end + \"] $\" + lhs + \" := \" + out;\r\n  this._string = str;\r\n  this.toString = function toString() {return this._string;} \r\n}\r\n\r\nfunction ActiveEdge(start, end, lhs, next, rest, out, rules, text) {\r\n  this.start = start;\r\n  this.end = end;\r\n  this.lhs = lhs;\r\n  this.next = next;\r\n  this.rest = rest;\r\n  this.out = out;\r\n  this.rules = rules;\r\n  this.text = text;\r\n  this.isPassive = false;\r\n\r\n  var str = \"<\" + start + \"-\" + end + \"> $\" + lhs + \" -> \" + next + \r\n    \", \" + rest + \" := \" + out + \" <- \" + rules;\r\n  this._string = str;\r\n  this.toString = function toString() {return this._string;} \r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// the main parsing function: a simple top-down chartparser\r\n//  - 'words' is an array of strings\r\n//  - 'grammar' is a hash table of left-hand-sides mapping to arrays of right-hand-sides\r\n//  - 'root' is the starting category (a string)\r\n//    if unspecified, use the '$root' property of the grammar\r\n//  - 'filter' is an optional left-corner filter \r\n//    (a mapping from categories/rule-refs to words)\r\n//    if specified, it is used when predicting new edges\r\n// returns the final chart\r\nexport function parse(words, grammar, root, filter) {\r\n  if (!root) {\r\n    root = grammar.$root;\r\n  }\r\n  var chart = new Chart(words.length);\r\n  var agenda = [];\r\n\r\n  var leftCornerFilter;\r\n  if (filter == undefined) {\r\n    leftCornerFilter = function() {return true};\r\n  } else {\r\n    leftCornerFilter = function leftCornerFilter(ruleref, position) {\r\n      var leftCorners = filter[ruleref];\r\n      return leftCorners ? words[position] in leftCorners : true;\r\n    }\r\n  }\r\n  \r\n  // add an edge to the chart and the agenda, if it does not already exist\r\n  function addToChart(inference, start, end, lhs, rhs, out, rules, text) {\r\n    var edge;\r\n    if (rhs.length > 0) {\r\n      var next = rhs[0];\r\n      var rest = rhs.slice(1);\r\n      switch (next.constructor) {\r\n\t\r\n      case Array:\r\n\t// the next symbol is a sequence\r\n\taddToChart(inference+\",SEQUENCE\", start, end, lhs, next.concat(rest), out, rules, text);\r\n\treturn;\r\n\t\r\n      case SRGS.RepeatClass:\r\n\t// the next symbol is a repetition\r\n\tvar min = next.min;\r\n\tvar max = next.max;\r\n\t// skip repeat \r\n\tif (min <= 0) {\r\n\t  addToChart(inference+\",SKIP\", start, end, lhs, rest, out, rules, text);\r\n\t}\r\n\t// repeat \r\n\tif (max > 0) {\r\n\t  var content = next.content;\r\n\t  var rhs = (max==1 ? [content] : [content, SRGS.Repeat(min ? min-1 : min, max-1, content)]);\r\n\t  addToChart(inference+\",REPEAT\", start, end, lhs, rhs.concat(rest), out, rules, text);\r\n\t}\r\n\treturn;\r\n\t\r\n      case SRGS.OneOfClass:\r\n\t// the next symbol is a disjunction\r\n\tvar oneof = next.content;\r\n\tfor (var i in oneof) {\r\n\t  var rhs = oneof[i].concat(rest);\r\n\t  addToChart(inference+\",ONEOF\", start, end, lhs, rhs, out, rules, text);\r\n\t} \r\n\treturn;\r\n\t\r\n      case SRGS.TagClass:\r\n\t// the next symbol is a semantic action\r\n\tout = clone(out);\r\n\trules = clone(rules);\r\n\teval(next.content);\r\n\taddToChart(inference+\",TAG\", start, end, lhs, rest, out, rules, text);\r\n\treturn;\r\n      }\r\n\r\n      edge = new ActiveEdge(start, end, lhs, next, rest, out, rules, text);\r\n    } else {\r\n      edge = new PassiveEdge(start, end, lhs, out);\r\n    }\r\n    \r\n    // try to add the edge; if successful, also add it to the agenda\r\n    if (chart.add(edge)) {\r\n      LOG(\"+ \" + inference + \": \" + edge);\r\n      agenda.push(edge);\r\n    }\r\n  }\r\n  \r\n  // seed the agenda with the starting rule\r\n  addToChart(\"INIT\", 0, 0, root, grammar[root], {}, {}, {});\r\n  \r\n  // main loop\r\n  while (agenda.length > 0) {\r\n    var edge = agenda.pop();\r\n    var start= edge.start;\r\n    var end  = edge.end;\r\n    var lhs  = edge.lhs;\r\n    var next = edge.next;\r\n    LOG(edge);\r\n\r\n    if (edge.isPassive) {\r\n      // combine\r\n      var actives = chart.actives[start][lhs];\r\n      for (var i in actives) {\r\n\tvar active = actives[i];\r\n\tvar rules = clone(active.rules);\r\n\tvar text = active.text;\r\n\ttext[edge.lhs] = words.slice(start, end).join(\" \");\r\n\tif (typeof edge.out == 'object' && isEmpty(edge.out)) {\r\n\t    rules[edge.lhs] = text[edge.lhs];\r\n\t} else {\r\n        rules[edge.lhs] = clone(edge.out);\r\n    }\r\n\taddToChart(\"COMBINE\", active.start, end, active.lhs, active.rest, active.out, rules, text);\r\n      }\r\n\r\n    } else if (next.constructor == SRGS.RefClass) {\r\n      var ref = next.content;\r\n      // combine\r\n      var passives = chart.passives[end][ref];\r\n      for (var i in passives) {\r\n\tvar passive = passives[i];\r\n\tvar rules = clone(edge.rules);\r\n\tvar text = edge.text;\r\n\trules[passive.lhs] = clone(passive.out);\r\n\ttext[passive.lhs] = passive.text;\r\n\taddToChart(\"COMBINE\", start, passive.end, lhs, edge.rest, edge.out, rules, text);\r\n      }\r\n      // predict\r\n      if (ref in grammar) {\r\n\tif (leftCornerFilter(ref, end)) {\r\n\t  addToChart(\"PREDICT\", end, end, ref, grammar[ref], {}, {}, {});\r\n\t}\r\n      }\r\n\r\n    } else if (next == words[end]) {\r\n      // scan\r\n      addToChart(\"SCAN\", start, end+1, lhs, edge.rest, edge.out, edge.rules, edge.text);\r\n    }\r\n  }\r\n\r\n  return chart;\r\n}\r\n\r\n\r\n","//\r\n//  runparser.js\r\n//\r\n/*\r\n  The author or authors of this code dedicate any and all \r\n  copyright interest in this code to the public domain.\r\n*/\r\n\r\n\r\n// helper functions for the parser demo\r\n\r\nimport * as SRGS from './srgs'\r\n\r\nfunction getElement(id) {\r\n  return document.getElementById(id);\r\n}\r\n\r\nfunction appendElement(parent, element, text) {\r\n  var elem = document.createElement(element);\r\n  if (text)\r\n    elem.appendChild(document.createTextNode(text));\r\n  parent.appendChild(elem);\r\n  return elem\r\n}\r\n\r\nfunction runParser(input) {\r\n  var resultsDiv = getElement(\"results\");\r\n  resultsDiv.innerHTML = \"\";\r\n  var maybeFilter;\r\n  if (getElement(\"usefilter\") && getElement(\"usefilter\").checked) {\r\n    maybeFilter = filter;\r\n    appendElement(resultsDiv, \"EM\", \"Using left-corner filter\");\r\n  }\r\n  var startTime = new Date();\r\n  var parseChart = parse(input, grammar, grammar.$root, maybeFilter);\r\n  var parseTime = new Date() - startTime;\r\n  var parseResults = parseChart.resultsForRule(grammar.$root);\r\n  \r\n  console.log(parseResults[0]);\r\n  \r\n  if (parseResults) {\r\n    for (var i in parseResults) {\r\n        resultsDiv.innerHTML += display(parseResults[i],\"\");\r\n    }\r\n  } else {\r\n    appendElement(resultsDiv, \"P\", \"No results found!\");\r\n  }\r\n  \r\n/*\r\n  if (parseResults) { \r\n    var resultList = appendElement(resultsDiv, \"OL\");\r\n    for (var i in parseResults) \r\n      appendElement(resultList, \"LI\", JSON.stringify(parseResults[i]));\r\n  } else {\r\n    appendElement(resultsDiv, \"P\", \"No results found!\");\r\n  }\r\n*/\r\n  var statistics = parseChart.statistics()\r\n  appendElement(resultsDiv, \"P\", \"Chart size: \" + statistics.nrEdges + \" edges\" +\r\n\t\t\" (\" + statistics.nrPassiveEdges + \" passive)\");\r\n  appendElement(resultsDiv, \"P\", \"Parse time: \" + parseTime + \" ms\" + \r\n\t\t\" (\" + (parseTime / statistics.nrEdges).toFixed(2) + \" ms/edge)\");\r\n}\r\n\r\nfunction runWordParser() {\r\n  runParser(getElement(\"input\").value.split(/\\s+/));\r\n}\r\n\r\nfunction runCharacterParser() {\r\n  runParser(getElement(\"input\").value.split(\"\"));\r\n}\r\n\r\nexport function loadGrammar(str) {\r\n    var dom = parseXML(str);\r\n    var root = dom.getElementsByTagName(\"grammar\")[0].getAttribute(\"root\");\r\n    var grammar = new SRGS.Grammar(root);\r\n    var xrules = dom.getElementsByTagName(\"rule\");\r\n    for(var r=0; r < xrules.length; r++) {\r\n        var xrule = xrules[r];\r\n        var id = xrule.getAttribute(\"id\");\r\n        grammar[id] = processRuleExpansions(xrule);\r\n    }\r\n    return grammar;\r\n}\r\n\r\nfunction processRuleExpansions(xrule) {\r\n    var xitems = xrule.childNodes;\r\n    var rule = [];\r\n    for(var i=0; i < xitems.length; i++) {\r\n        if (xitems[i].nodeType == 3) {\r\n            var str = xitems[i].textContent.trim();\r\n            if (str != \"\") {\r\n                rule.push(str.split(/ +/));\r\n            }\r\n        } else if (xitems[i].nodeType == 1) {\r\n            if (xitems[i].nodeName == \"token\") {\r\n                rule.push(SRGS.Tag(xitems[i].textContent));\r\n            } else if (xitems[i].nodeName == \"ruleref\") {\r\n                var uri = xitems[i].getAttribute(\"uri\");\r\n                rule.push(SRGS.Ref(uri.slice(1)));\r\n            } else if (xitems[i].nodeName == \"tag\") {\r\n                rule.push(SRGS.Tag(xitems[i].textContent.trim()));\r\n            } else if (xitems[i].nodeName == \"one-of\") {\r\n                rule.push(SRGS.OneOf(processRuleExpansions(xitems[i])));\r\n            } else if (xitems[i].nodeName == \"item\") {\r\n                var repeat = xitems[i].getAttribute(\"repeat\");\r\n                if (!repeat) {\r\n                    rule.push(processRuleExpansions(xitems[i]));\r\n                } else {\r\n                    var r = repeat.split(\"-\");\r\n                    var min = parseInt(r[0]);\r\n                    var max = parseInt(r[1]);\r\n                    max = (max) ? max : Infinity;\r\n                    rule.push(SRGS.Repeat(min, max, processRuleExpansions(xitems[i])));\r\n                }\r\n            } else {\r\n                console.log(xitems[i]);\r\n            }\r\n        }\r\n    }\r\n\treturn rule;\r\n}\r\n\r\nfunction parseXML(text) {\r\n    if (typeof DOMParser != \"undefined\") {\r\n        // Mozilla, Firefox, and related browsers\r\n        return (new DOMParser()).parseFromString(text, \"application/xml\");\r\n    }\r\n    else if (typeof ActiveXObject != \"undefined\") {\r\n        // Internet Explorer.\r\n        var doc = XML.newDocument();  // Create an empty document\r\n        doc.loadXML(text);            // Parse text into it\r\n        return doc;                   // Return it\r\n    }\r\n    else {\r\n        // As a last resort, try loading the document from a data: URL\r\n        // This is supposed to work in Safari. Thanks to Manos Batsis and\r\n        // his Sarissa library (sarissa.sourceforge.net) for this technique.\r\n        var url = \"data:text/xml;charset=utf-8,\" + encodeURIComponent(text);\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"GET\", url, false);\r\n        request.send(null);\r\n        return request.responseXML;\r\n    }\r\n};\r\n","export const grammar = `\r\n<grammar root=\"start\">\r\n    <rule_id=\"start\">\r\n        <one-of>\r\n            <item>please\r\n                <ruleref uri=\"#combine\"/>\r\n                <tag>out.combine=Object();\r\n                out.combine.object=rules.combine.object;\r\n                out.combine.do=rules.combine.type;</tag> </item>\r\n\r\n            <item>\r\n                <ruleref uri=\"#combine\"/>\r\n                <tag>out.combine=Object();\r\n                out.combine.object=rules.combine.object;\r\n                out.combine.do=rules.combine.type;</tag> </item> </one-of>\r\n    </rule>\r\n\r\n    <rule id=\"object_1\">\r\n        <one-of>\r\n            <item>light</item>\r\n            <item>heat</item>\r\n            <item>A C<tag>out=\"air conditioning\";</tag></item>\r\n            <item>air conditioning;</tag></item>\r\n        </one-of>\r\n    </rule>\r\n\r\n    <rule id=\"object_2\">\r\n        <one-of>\r\n            <item>window</item>\r\n            <item>door</item>\r\n        </one-of>\r\n    </rule>\r\n\r\n    <rule_id=\"action_1\">\r\n        <one-of>\r\n            <item>on</item>\r\n            <item>off</item>\r\n        </one-of>\r\n    </rule>\r\n\r\n    <rule_id=\"action_2\">\r\n        <one-of>\r\n            <item>open</item>\r\n            <item>close</item>\r\n        </one-of>\r\n    </rule>\r\n\r\n    <rule_id=\"combine\">\r\n        <one-of>\r\n            <item>turn\r\n                <ruleref uri=\"#action_1\"/>\r\n                the\r\n                <ruleref uri=\"#object_1\"/>\r\n                <tag>out.object=rules.object_1;\r\n                out.type=rules.action_1;</tag></item>\r\n\r\n            <item>turn the\r\n                <ruleref uri=\"#object_1\"/>\r\n                <ruleref uri=\"#action_1\"/>\r\n                <tag>out.object=rules.object_1;\r\n                out.type=rules.action_1;</tag></item>  \r\n    \r\n            <item>\r\n                <ruleref uri=\"#action_2\"/>\r\n                the\r\n                <ruleref uri=\"#object_2\"/>\r\n                <tag>out.object=rules.object_2;\r\n                out.type=rules.action_2;</tag></item>\r\n        </one-of>\r\n    </rule>\r\n</grammar>\r\n`","import { MachineConfig, send, Action, assign } from \"xstate\";\n\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/dmHome'\n\nconst gram = loadGrammar(grammar)\n// const input = \"Please turn the light off\"\n// const prs = parse(input.split(/\\s+/), gram)\n// const result = prs.resultsForRule(gram.$root)[0]\n// console.log(result)\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction parsing(text:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return (parse(text.split(/\\s+/), gram).resultsForRule(gram.$root)[0])\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: listen(),\n            },\n        }\n    })\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => parsing(context.recResult) !== undefined,\n                    target: \"returnobject\",\n                    actions: assign((context) => { return { option: parsing(context.recResult) } }),\n                },\n                {target: \".nomatch\" }]    \n            },\n                ...promptAndAsk(\"What would you like to do?\")\n        },\n        returnobject: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. the object you have chosen is ${context.option.combine.object} and the action you have chosen is ${context.option.combine.action}.`\n                    }))\n                },\n            }\n        },\n        \n    }\n})\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmSmartHome\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n","//\r\n//  srgs.js\r\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\r\n//\r\n/*\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU Lesser General Public License as published \r\n  by the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n  \r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n  \r\n  You should have received a copy of the GNU General Public License\r\n  and the GNU Lesser General Public License along with this program.  \r\n  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// encoding SRGS grammars in javascript\r\n\r\nexport function Grammar(root) {\r\n  this.$root = root;\r\n  \r\n  this.VOID = [OneOf([])];\r\n  this.NULL = [];\r\n  this.GARBAGE = []; \r\n  \r\n  this.$check = function() {\r\n    for (var i in this) {\r\n      if (i !== \"$root\" && i !== \"$check\") {\r\n\ttry {\r\n\t  checkSequenceExpansion(this[i]);\r\n\t} catch(err) {\r\n\t  throwRuleError(\"When checking grammar rule '\" + i + \"'\", err);\r\n\t}\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function WordSet(str) {\r\n  var words = str.split(/ +/);\r\n  var set = {};\r\n  for (var i in words) {\r\n    set[words[i]] = true;\r\n  }\r\n  return set;\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// rule expansion constructors\r\n\r\n// sequences are ordinary arrays\r\nexport function Sequence(seq) {\r\n  return seq;\r\n}\r\n\r\nexport function Ref(ref) {\r\n  return new RefClass(ref);\r\n}\r\n\r\nexport function Tag(tag) {\r\n  return new TagClass(tag);\r\n}\r\n\r\nexport function OneOf(alternatives) {\r\n  return new OneOfClass(alternatives);\r\n}\r\n\r\nexport function Repeat(min, max, sequence) {\r\n  return new RepeatClass(min, max, sequence);\r\n}\r\n\r\nexport function Optional(sequence) {\r\n  return new RepeatClass(0, 1, sequence);\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// rule expansion classes\r\n\r\nexport function RefClass(ruleref) {\r\n  this.content = ruleref;\r\n  this._string = \"$\" + ruleref;\r\n  this.toString = function toString() {return this._string}\r\n}\r\n    \r\nexport function TagClass(tag) {\r\n  this.content = tag;\r\n  this._string = \"{\" + tag + \"}\";\r\n  this.toString = function toString() {return this._string}\r\n}\r\n\r\nexport function OneOfClass(alternatives) {\r\n  this.content = alternatives;\r\n  this._string = \"(\" + alternatives.join(\"|\") + \")\";\r\n  this.toString = function toString() {return this._string}\r\n}\r\n\r\nexport function RepeatClass(min, max, sequence) {\r\n  this.min = min;\r\n  this.max = max;\r\n  this.content = sequence;\r\n  this._string = this.content + \"<\" + this.min + \"-\" + (this.max==Infinity ? \"\" : this.max) + \">\"\r\n  this.toString = function toString() {return this._string}\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// checking rule expansions\r\n\r\nexport function throwRuleError(message, error) {\r\n  if (error == undefined) {\r\n    throw TypeError(message);\r\n  } else {\r\n    throw TypeError(message + \"; \" + error.message);\r\n  }\r\n}\r\n\r\nexport function checkSequenceExpansion(sequence) {\r\n  try {\r\n    if (sequence.constructor !== Array) {\r\n      throwRuleError(\"Expected Array, found \" + sequence.constructor.name);\r\n    }\r\n    for (var i in sequence) {\r\n      if (sequence[i].constructor == Array) {\r\n\tcheckSequenceExpansion(sequence[i]);\r\n      } else if (sequence[i].constructor != String) {\r\n\tsequence[i].checkExpansion();\r\n      }\r\n    }\r\n  } catch(err) {\r\n    throwRuleError(\"When checking sequence expansion\", err);\r\n  }\r\n};\r\n\r\nRefClass.prototype.checkExpansion = function checkExpansion() {\r\n  if (this.content.constructor !== String) {\r\n    throwRuleError(\"When checking Ref content; Expected String, found \" + this.content.constructor.name);\r\n  }\r\n};\r\n\r\nTagClass.prototype.checkExpansion = function checkExpansion() {\r\n  if (this.content.constructor !== String) {\r\n      throwRuleError(\"When checking Tag content; Expected String, found \" + this.content.constructor.name);\r\n  }\r\n};\r\n\r\nOneOfClass.prototype.checkExpansion = function checkExpansion() {\r\n  try {\r\n    if (this.content.constructor !== Array) {\r\n      throwRuleError(\"Expected Array, found \" + this.content.constructor.name);\r\n    }\r\n    for (var i in this.content) {\r\n      checkSequenceExpansion(this.content[i]);\r\n    }\r\n  } catch(err) {\r\n    throwRuleError(\"When checking OneOf content\", err);\r\n  }\r\n};\r\n\r\nRepeatClass.prototype.checkExpansion = function checkExpansion() {\r\n  try {\r\n    if (this.min.constructor !== Number || this.max.constructor !== Number) {\r\n      throwRuleError(\"Expected min/max to be Number, found \" + this.min.constructor.name + \"/\" + this.max.constructor.name);\r\n    }\r\n    if (!(0 <= this.min && this.min <= this.max)) {\r\n      throwRuleError(\"Expected 0 <= min <= max, found \" + this.min + \"/\" + this.max);\r\n    }\r\n    checkSequenceExpansion(this.content);\r\n  } catch(err) {\r\n    throwRuleError(\"When checking Repeat content\", err);\r\n  }\r\n};\r\n\r\n"],"sourceRoot":""}