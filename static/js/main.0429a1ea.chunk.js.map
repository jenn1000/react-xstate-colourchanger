{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","grammar2","a","b","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","assign","context","option","recResult","prompt","entry","ENDSPEECH","ask","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","todo","timer","appointment","who","nomatch","wholeday","confirm_meeting_whole_day","confirm_time","confirmed","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.0429a1ea.chunk.js","sourcesContent":["// import { MachineConfig, send, Action, assign } from \"xstate\";\r\n// import \"./styles.scss\";\r\n// import * as React from \"react\";\r\n// import * as ReactDOM from \"react-dom\";\r\n// import { useMachine, asEffect } from \"@xstate/react\";\r\n// import { inspect } from \"@xstate/inspect\";\r\n\r\n// function say(text: string): Action<SDSContext, SDSEvent> {\r\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n// }\r\n\r\n// function listen(): Action<SDSContext, SDSEvent> {\r\n//     return send('LISTEN')\r\n// }\r\n\r\n// const grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n\r\n//     \"John\": { person: \"John Appleseed\" },\r\n//     \"Smith\": { person: \"Smith John\" },\r\n//     \"Tom\": { person: \"Tom Smith\" },\r\n//     \"David\": { person: \"David Smith\" },\r\n//     \"Emma\": { person: \"Emma James\" },\r\n//     \"Eric\": { person: \"Eric James\"},\r\n\r\n\r\n//     \"on Monday\": { day: \"Monday\" },\r\n//     \"on Tuesday\": { day: \"Tuesday\" },\r\n//     \"on Wednesday\": { day: \"Wednesday\" },\r\n//     \"on Thursday\" : { day: \"Thursday\" },\r\n//     \"on Friday\" : { day: \"Friday\" },\r\n//     \"on Saturday\" : { day: \"Saturday\" },\r\n//     \"on Sunday\" : { day: \"Sunday\" },\r\n    \r\n//     \"at one\" : { time: \"01:00\" },\r\n//     \"at two\" : { time: \"02:00\" },\r\n//     \"at three\" : { time: \"03:00\"},\r\n//     \"at four\": { time: \"04:00\" },\r\n//     \"at five\": { time: \"05:00\" },\r\n//     \"at six\": { time: \"06:00\" },\r\n//     \"at seven\": { time: \"07:00\" },\r\n//     \"at eight\": { time: \"08:00\" },\r\n//     \"at nine\": { time: \"09:00\" },\r\n//     \"at ten\": { time: \"10:00\" },\r\n//     \"at eleven\": { time: \"11:00\" },\r\n//     \"at twelve\": { time: \"12:00\" },\r\n//     \"at thirteen\": { time: \"13:00\" },\r\n//     \"at fourteen\": { time: \"14:00\" },\r\n//     \"at fifteen\": { time: \"15:00\" },\r\n//     \"at sixteen\": { time: \"16:00\" },\r\n//     \"at seventeen\": { time: \"17:00\" },\r\n//     \"at eighteen\": { time: \"18:00\" },\r\n//     \"at nineteen\": { time: \"19:00\" },\r\n//     \"at twenty\": { time: \"20:00\" },\r\n//     \"at twenty one\": { time: \"21:00\" },\r\n//     \"at twenty two\": { time: \"22:00\" },\r\n//     \"at twenty three\": { time: \"23:00\" },\r\n//     \"at twenty four\": { time: \"00:00\" }\r\n// }\r\n\r\n\r\n// const grammar2 : { [index: string]: boolean } =\r\n\r\n// { \r\n    \r\n//     \"yes\": true,\r\n//     \"of course\": true, \r\n//     \"Absolutely\": true,\r\n//     \"Sounds great\": true,\r\n//     \"yeah sure\": true,\r\n//     \"no\" : false,\r\n//     \"No way\" : false\r\n// }\r\n\r\n// function promptAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n//     return ({\r\n//         initial: 'prompt',\r\n//         states: {\r\n//             prompt: {\r\n//                 entry: say(prompt),\r\n//                 on: { ENDSPEECH: 'ask' }\r\n//             },\r\n//             ask: {\r\n//                 entry: send('LISTEN')\r\n//             },\r\n//         }})\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = \r\n\r\n// ({\r\n//     initial: 'init',\r\n//     states: \r\n    \r\n//     {\r\n//         init:{\r\n//             on: {\r\n//                 CLICK: 'welcome'\r\n//                 }\r\n//              },\r\n\r\n//         welcome: \r\n//         {\r\n//             on: {\r\n//                 RECOGNISED: {\r\n//                     target: \"query\",\r\n//                     actions: assign((context) => { return { option: context.recResult } }),\r\n//                 }    \r\n//             },\r\n//                     ...promptAsk(\"What would you like to do?\")\r\n//         },\r\n\r\n//         query: \r\n//         {\r\n//             invoke: {\r\n            \r\n//             id: 'rasa',\r\n//             src: (context, event) => nluRequest(context.option),\r\n//             onDone: {\r\n//                 target: 'menu',\r\n//                 actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\r\n//                 (context: SDSContext, event: any) => console.log(event.data)]\r\n//                 //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\r\n\r\n//             },\r\n//             onError: {\r\n//                 target: 'welcome',\r\n//                 actions: (context, event) => console.log(event.data)\r\n\r\n//                 }\r\n//             }\r\n//         },\r\n//         menu: {\r\n//             initial: \"prompt\",\r\n//             on: {\r\n//                 ENDSPEECH: [\r\n//                     { target: 'todo', cond: (context) => context.option === 'todo' },\r\n//                     { target: 'timer', cond: (context) => context.option === 'timer' },\r\n//                     { target: 'appointment', cond: (context) => context.option === 'appointment' }\r\n//                 ]\r\n//             },\r\n//             states: {\r\n//                 prompt: {\r\n//                     entry: send((context) => ({\r\n//                         type: \"SPEAK\",\r\n//                         value: `OK. I understand.`\r\n//                     })),\r\n//         },\r\n//      /*            nomatch: {\r\n//                     entry: say(\"Sorry, I don't understand\"),\r\n//                     on: { ENDSPEECH: \"prompt\" }\r\n//         } */ \r\n//             }       \r\n//         },\r\n\r\n\r\n//         todo: {\r\n//             initial: \"prompt\",\r\n//             on: { ENDSPEECH: \"init\" },\r\n//             states: {\r\n//                 prompt: {\r\n//                     entry: send((context) => ({\r\n//                         type: \"SPEAK\",\r\n//                         value: `Let's create a to do item`\r\n//                     }))\r\n//                 }}\r\n//         },\r\n        \r\n//         timer: {\r\n//             initial: \"prompt\",\r\n//             on: { ENDSPEECH: \"init\" },\r\n//             states: {\r\n//                 prompt: {\r\n//                     entry: send((context) => ({\r\n//                         type: \"SPEAK\",\r\n//                         value: `Let's create a timer`\r\n//                     }))\r\n//                 }}\r\n//         },\r\n        \r\n        \r\n//         appointment: {\r\n//             initial: \"prompt\",\r\n//             on: { ENDSPEECH: \"who\" },\r\n//             states: {\r\n//                 prompt: {\r\n//                     entry: send((context) => ({\r\n//                         type: \"SPEAK\",\r\n//                         value: `Let's create an appointment`\r\n//                     }))\r\n//                 }}\r\n//         },\r\n\r\n//         who: \r\n        \r\n//         {\r\n//             initial: \"prompt\",\r\n//             on: \r\n//             {\r\n//                 RECOGNISED: \r\n//                 [\r\n//                     {\r\n//                     cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n//                     actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n//                     target: \"day\"\r\n//                     },\r\n//                 { target: \".nomatch\" }\r\n//                 ]\r\n//             },\r\n\r\n//             states: \r\n            \r\n//             {\r\n//                 prompt: \r\n                \r\n//                 {\r\n//                     entry: say(\"Who are you meeting with?\"),\r\n//                     on: { ENDSPEECH: \"ask\" }\r\n//                 },\r\n                \r\n//                 ask: \r\n                \r\n//                 {\r\n//                     entry: listen()\r\n//                 },\r\n                \r\n//                 nomatch: \r\n                \r\n//                 {\r\n//                     entry: say(\"Sorry I don't know them\"),\r\n//                     on: { ENDSPEECH: \"prompt\" }\r\n//                 }\r\n//             }\r\n//         },\r\n\r\n//         day: \r\n        \r\n//         {\r\n//             initial: \"prompt\",\r\n//             on: \r\n            \r\n//             {\r\n// \t            RECOGNISED: \r\n//                 [\r\n//                     {\r\n// \t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n// \t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n// \t\t            target: \"wholeday\"\r\n\r\n// \t\t            },\t\r\n\r\n// \t\t            { target: \".nomatch\" }\r\n                \r\n//                 ]\r\n// \t        },\r\n\r\n//             states: \r\n\r\n//             {\r\n//                 prompt: \r\n                \r\n//                 {\r\n//                     entry: send((context) => ({\r\n//                         type: \"SPEAK\",\r\n//                         value: `OK. ${context.person}. On which day is your meeting?`\r\n//                     })),\r\n// \t\t            on: { ENDSPEECH: \"ask\" }\r\n//                 },\r\n// \t\t        ask: \r\n                \r\n//                 {\r\n// \t\t            entry: listen()\r\n// \t            },\r\n\r\n// \t\t        nomatch: \r\n                \r\n//                 {\r\n// \t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\r\n// \t\t            on: { ENDSPEECH: \"prompt\" }\r\n// \t            }\t     \r\n//             }\r\n//         },\r\n\r\n\r\n// \t    wholeday: \r\n        \r\n//         {\r\n// \t\t        initial: \"prompt\",\r\n// \t\t        on: \r\n                \r\n//                 {\r\n// \t                RECOGNISED: \r\n                    \r\n//                     [\r\n//                         {cond: (context) => grammar2[context.recResult] === true,\r\n//                         target: \"timefixed\"},\r\n\r\n// \t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\r\n// \t\t\t\t\t\ttarget: \"settime\"},\r\n\r\n// \t                { target: \".nomatch\" }\r\n//                     ]\r\n\t\t        \r\n//                 },\r\n\r\n\r\n// \t\t        states: \r\n                \r\n//                 {\r\n// \t\t            prompt: \r\n                    \r\n//                     {\r\n// \t\t\t            entry: send((context) => ({\r\n// \t\t\t                type: \"SPEAK\",\r\n// \t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\r\n// \t\t\t            })),\r\n// \t\t\t            on: { ENDSPEECH: \"ask\" }\r\n// \t\t            },\r\n\r\n// \t\t            ask: {\r\n// \t\t                entry: listen()\r\n// \t\t            },\r\n\r\n// \t\t            nomatch: \r\n\r\n//                     {\r\n// \t\t\t            entry: say(\"Please repeat it again\"),\r\n// \t\t                on: { ENDSPEECH: \"prompt\" }\r\n// \t\t            }\r\n// \t\t        }\t     \r\n//         },\r\n\r\n\r\n//             timefixed: \r\n            \r\n//             {\r\n// \t\t           initial: \"prompt\",\r\n\r\n// \t               on: \r\n                   \r\n//                    {\r\n// \t\t               RECOGNISED: \r\n                       \r\n//                        [\r\n//                            {cond: (context) => grammar2[context.recResult] === true,\r\n// \t\t\t               target: \"Finished\"},\r\n// \t\t\t\t\t\t   {cond: (context) => grammar2[context.recResult] === false,\r\n//                            target: \"who\"},\r\n// \t\t                   { target: \".nomatch\" }\r\n//                         ]\r\n// \t\t            },\r\n\r\n\r\n\r\n// \t\t            states: \r\n                    \r\n//                     {\r\n// \t\t                prompt: \r\n                        \r\n//                         {\r\n// \t\t\t                entry: send((context) => ({\r\n// \t\t\t                    type: \"SPEAK\",\r\n// \t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\r\n//                             })),\r\n//                             on: { ENDSPEECH: \"ask\" }\r\n// \t\t                },\r\n\r\n\r\n// \t\t                ask: \r\n                        \r\n//                         {\r\n// \t\t\t                entry: listen()\r\n// \t\t                },\r\n\r\n// \t\t                nomatch: \r\n                        \r\n//                         {\r\n// \t\t\t                entry: say(\"Please repeat it again\"),\r\n// \t\t\t                on: { ENDSPEECH: \"prompt\" }\r\n// \t\t                }\r\n//                     }\r\n// \t        },\r\n\r\n// \t\t\tsettime: \r\n                \r\n//                     {\r\n\r\n// \t\t\t\t\t    initial: \"prompt\",\r\n// \t\t\t\t\t    on: \r\n                    \r\n//                     {\r\n// \t\t\t\t\t\tRECOGNISED: \r\n//                         [\r\n//                             {\r\n\t\t\t\t\t\t\t\r\n//                             cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n// \t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\r\n// \t\t\t\t\t\t\ttarget: \"withtime\"\r\n\r\n// \t\t\t\t\t\t    },\r\n\r\n// \t\t\t\t\t\t    { target: \".nomatch\" }\r\n//                         ]\r\n// \t\t\t\t\t},\r\n\r\n\r\n// \t\t\t\t\t    states: \r\n\r\n//                         {\r\n// \t\t\t\t\t\t    prompt: { entry: say(\"What time is your meeting\"),\r\n// \t\t\t\t\t\t    on: { ENDSPEECH: \"ask\" }\r\n// \t\t\t\t\t    },\r\n\r\n// \t\t\t\t\task: \r\n//                     {\r\n// \t\t\t\t\t\tentry: listen()\r\n// \t\t\t\t    },\r\n\r\n// \t\t\t\tnomatch:\r\n                \r\n//                 {\r\n// \t\t\t\t\tentry: say(\"Please repeat it again\"),\r\n// \t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\r\n// \t\t\t\t}\r\n// \t\t\t            }\r\n\t\t                \r\n//                     },\r\n\r\n\r\n// \t\twithtime: \r\n        \r\n//         {\r\n// \t\t\tinitial: \"prompt\",\r\n// \t\t\ton: \r\n            \r\n//             {\r\n// \t\t\t\tRECOGNISED: \r\n//                 [\r\n                    \r\n//                     { \r\n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\r\n// \t\t\t\t\ttarget: \"Finished\"\r\n//                     },\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\r\n// \t\t\t\t\ttarget: \"who\"\r\n// \t\t\t\t    },\r\n// \t\t\t\t    { target: \".nomatch\" }\r\n//                 ]\r\n// \t\t\t},\r\n\r\n\r\n// \t\t\t states: \r\n             \r\n//             {\r\n// \t\t\t\t prompt: \r\n                 \r\n//                  {\r\n// \t\t\t\t\t entry: send((context) => ({\r\n// \t\t\t\t\t\t type: \"SPEAK\",\r\n// \t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\r\n// \t\t\t\t\t })),\r\n// \t\t\t\t\t on: { ENDSPEECH: \"ask\" }\r\n// \t\t\t\t },\r\n\r\n// \t\t\t\t ask: \r\n//                 {\r\n// \t\t\t\t\t entry: listen()\r\n// \t\t\t\t},\r\n\r\n// \t\t\t\t nomatch: \r\n                 \r\n//                  {\r\n// \t\t\t\t\t entry: say(\"Please repeat it again\"),\r\n// \t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\r\n// \t\t\t\t }\r\n// \t\t\t}\r\n// \t\t},\r\n\r\n//                 Finished: \r\n                \r\n//                 {\r\n// \t\t                 initial: \"prompt\",\r\n// \t\t                 on: { ENDSPEECH: \"init\" },\r\n// \t\t                 states: \r\n//                         {\r\n// \t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")},\r\n// \t                    }\r\n// \t            }\t    \r\n//     }\r\n\r\n// })\r\n\r\n\r\n\r\n// /*RASA API*/\r\n// const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n// const rasaurl = 'https://appointment--app.herokuapp.com/model/parse'\r\n// const nluRequest = (text: string) =>\r\n//     fetch(new Request(proxyurl + rasaurl, {\r\n//         method: 'POST',\r\n//         headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\r\n//         body: `{\"text\": \"${text}\"}`\r\n//     }))\r\n//         .then(data => data.json());\r\n\r\nimport { MachineConfig, Machine, send, Action, assign } from \"xstate\";\r\nimport \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \r\n} = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Mary\": { person: \"Mary Curie\" },\r\n    \"George\": { person: \"George Smith\" },\r\n    \"Axel\": { person: \"Axel Rose\" },\r\n    \"Sebastian\": { person: \"Sebastian Bach\" },\r\n\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n\t\"on Saturday\": { day: \"Saturday\" },\r\n\t\"on Sunday\": { day: \"Sunday\" },\r\n\r\n\t\"at 5\": { time: \"5:00\" },\r\n\t\"at 6\": { time: \"6:00\" },\r\n    \"at 7\": { time: \"7:00\" },\r\n    \"at 8\": { time: \"8:00\" },\r\n    \"at 9\": { time: \"9:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" }\r\n}\r\n\r\nconst grammar2: { [index: string]: boolean } = {\r\n    \"yes of course\": true,\r\n    \"sure\": true,\r\n    \"absolutely\": true,\r\n    \"yes\": true,\r\n    \"no way\": false,\r\n    \"no\": false\r\n}\r\n\r\nlet a = grammar2[\"yes\"]\r\nlet b = grammar2[\"no\"]\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: send('LISTEN')\r\n            },\r\n        }})\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n   \r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }            \r\n        },        \r\n\r\n        welcome: {\r\n            on: {\r\n                RECOGNISED: {\r\n                    target: \"query\",\r\n                    actions: assign((context) => { return { option: context.recResult } }),\r\n                }    \r\n            },\r\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\r\n        },\r\n\r\n\r\n        query: {\r\n            invoke: {\r\n                id: 'rasa',\r\n                src: (context, event) => nluRequest(context.option),\r\n                onDone: {\r\n                    target: 'menu',\r\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\r\n                    (context: SDSContext, event: any) => console.log(event.data)]\r\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\r\n\r\n                },\r\n                onError: {\r\n                    target: 'welcome',\r\n                    actions: (context, event) => console.log(event.data)\r\n                }\r\n            }\r\n        },\r\n\r\n        menu: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                ENDSPEECH: [\r\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\r\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\r\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\r\n                ]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. I understand.`\r\n                    })),\r\n        },\r\n     /*            nomatch: {\r\n                    entry: say(\"Sorry, I don't understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n        } */ \r\n            }       \r\n        },\r\n\r\n\r\n        todo: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create a to do item`\r\n                    }))\r\n                }}\r\n        },\r\n        \r\n        timer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create a timer`\r\n                    }))\r\n                }}\r\n        },\r\n        \r\n        \r\n        appointment: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create an appointment`\r\n                    }))\r\n                }}\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"wholeday\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`,\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        wholeday: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\r\n                    target: \"time\"\r\n                },\r\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\r\n\t\ttarget: \"confirm_meeting_whole_day\"\r\n\t\t},\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\r\n                    })),\r\n\t\t    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n\t\task: {\r\n\t\t     entry: listen()\r\n            },\r\n\t    nomatch: {\r\n\t    \tentry: say(\"Sorry, I don't understand\"),\r\n\t\ton: { ENDSPEECH: \"prompt\" }\r\n\t            }\r\n                }\r\n\t},\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"confirm_time\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.day}. What time is your meeting?`,\r\n                    \r\n                    })),\r\n            on: { ENDSPEECH: \"ask\" }\r\n                },\r\n        ask: {\r\n            entry: listen()\r\n                },\r\n        nomatch: {\r\n            entry: say(\"Sorry I don't know that\"),\r\n        on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n                }\r\n        },\r\n        confirm_meeting_whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\r\n                    target: \"init\"\r\n                },\r\n\t\t{cond: (context) => (grammar2[context.recResult] === a),\r\n\t\ttarget: \"confirmed\"\r\n\t\t},\r\n                { target: \".nomatch\" }]\r\n            },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n\t\t    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n\t\task: {\r\n\t\t     entry: listen()\r\n            },\r\n\t    nomatch: {\r\n\t    \tentry: say(\"Sorry, I don't understand\"),\r\n\t\ton: { ENDSPEECH: \"prompt\" }\r\n\t           }\r\n                }\r\n\r\n\t},\r\n    confirm_time: {\r\n        initial: \"prompt\",\r\n        on:  {\r\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === b),\r\n                target: \"who\"\r\n            },\r\n    {cond: (context) => (grammar2[context.recResult] === a),\r\n    target: \"confirmed\"\r\n    },\r\n            { target: \".nomatch\" }]\r\n        },\r\n        states: {\r\n            prompt: {\r\n               entry: send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\r\n                })),\r\n        on: { ENDSPEECH: \"ask\" }\r\n            },\r\n    ask: {\r\n         entry: listen()\r\n        },\r\n    nomatch: {\r\n        entry: say(\"Sorry, I don't understand\"),\r\n    on: { ENDSPEECH: \"prompt\" }\r\n           }\r\n            },\r\n        },\r\n    confirmed: {\r\n        initial: \"prompt\",\r\n        on: { ENDSPEECH: \"init\" },\r\n        states: {\r\n            prompt: {\r\n                entry: send((context) => ({\r\n                    type: \"SPEAK\",\r\n                    value: `Your appointment has been created!`\r\n                }))\r\n            },\r\n    }\r\n    }\r\n    }})\r\n\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://irenetsk.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\n\r\n\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a appointment command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://appointment--app.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}