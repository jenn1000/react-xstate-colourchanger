{"ast":null,"code":"// SRGS parser and example (logs the results to console on page load)\nimport{loadGrammar}from'./runparser';import{parse}from'./chartparser';import{grammar}from'./grammars/dmHome';const gram=loadGrammar(grammar);const input=\"Please turn the light off\";const prs=parse(input.split(/\\s+/),gram);const result=prs.resultsForRule(gram.$root)[0];console.log(result);// function say(text: string): Action<SDSContext, SDSEvent> {\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n// }\n// function listen(): Action<SDSContext, SDSEvent> {\n//     return send('LISTEN')\n// }\n// function parsing(text:string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return (parse(text.split(/\\s+/), gram).resultsForRule(gram.$root)[0])\n// }\n// function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: 'prompt',\n//         states: {\n//             prompt: {\n//                 entry: say(prompt),\n//                 on: { ENDSPEECH: 'ask' }\n//             },\n//             ask: {\n//                 entry: listen(),\n//             },\n//         }\n//     })\n// }\n// export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//     initial: 'init',\n//     states: {\n//         init: {\n//             on: {\n//                 CLICK: 'welcome'\n//             }\n//         },\n//         welcome: {\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => parsing(context.recResult) !== undefined,\n//                     target: \"returnobject\",\n//                     actions: assign((context) => { return { option: parsing(context.recResult) } }),\n//                 },\n//                 {target: \".nomatch\" }]    \n//             },\n//                 ...promptAndAsk(\"What would you like to do?\")\n//         },\n//         returnobject: {\n//             initial: \"prompt\",\n//             on: { ENDSPEECH: \"init\" },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `OK. the object is ${context.option.combine.object} and the action is ${context.option.combine.action}.`\n//                     }))\n//                 },\n//             }\n//          },\n//     }\n// })","map":{"version":3,"sources":["C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["loadGrammar","parse","grammar","gram","input","prs","split","result","resultsForRule","$root","console","log"],"mappings":"AACA;AACA,OAASA,WAAT,KAA4B,aAA5B,CACA,OAASC,KAAT,KAAsB,eAAtB,CACA,OAASC,OAAT,KAAwB,mBAAxB,CAEA,KAAMC,CAAAA,IAAI,CAAGH,WAAW,CAACE,OAAD,CAAxB,CACA,KAAME,CAAAA,KAAK,CAAG,2BAAd,CACA,KAAMC,CAAAA,GAAG,CAAGJ,KAAK,CAACG,KAAK,CAACE,KAAN,CAAY,KAAZ,CAAD,CAAqBH,IAArB,CAAjB,CACA,KAAMI,CAAAA,MAAM,CAAGF,GAAG,CAACG,cAAJ,CAAmBL,IAAI,CAACM,KAAxB,EAA+B,CAA/B,CAAf,CACAC,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/dmHome'\n\nconst gram = loadGrammar(grammar)\nconst input = \"Please turn the light off\"\nconst prs = parse(input.split(/\\s+/), gram)\nconst result = prs.resultsForRule(gram.$root)[0]\nconsole.log(result)\n\n\n// function say(text: string): Action<SDSContext, SDSEvent> {\n//     return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n// }\n\n// function listen(): Action<SDSContext, SDSEvent> {\n//     return send('LISTEN')\n// }\n\n// function parsing(text:string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return (parse(text.split(/\\s+/), gram).resultsForRule(gram.$root)[0])\n// }\n\n// function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n//     return ({\n//         initial: 'prompt',\n//         states: {\n//             prompt: {\n//                 entry: say(prompt),\n//                 on: { ENDSPEECH: 'ask' }\n//             },\n//             ask: {\n//                 entry: listen(),\n//             },\n//         }\n//     })\n// }\n\n\n// export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//     initial: 'init',\n//     states: {\n//         init: {\n//             on: {\n//                 CLICK: 'welcome'\n//             }\n//         },\n//         welcome: {\n//             on: {\n//                 RECOGNISED: [{\n//                     cond: (context) => parsing(context.recResult) !== undefined,\n//                     target: \"returnobject\",\n//                     actions: assign((context) => { return { option: parsing(context.recResult) } }),\n//                 },\n//                 {target: \".nomatch\" }]    \n//             },\n//                 ...promptAndAsk(\"What would you like to do?\")\n//         },\n//         returnobject: {\n//             initial: \"prompt\",\n//             on: { ENDSPEECH: \"init\" },\n//             states: {\n//                 prompt: {\n//                     entry: send((context) => ({\n//                         type: \"SPEAK\",\n//                         value: `OK. the object is ${context.option.combine.object} and the action is ${context.option.combine.action}.`\n//                     }))\n//                 },\n//             }\n//          },\n        \n//     }\n// })\n"]},"metadata":{},"sourceType":"module"}