{"ast":null,"code":"import _objectSpread from \"C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport \"./styles.scss\";\nconst cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction help(prompt, name) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: name + \".hist\"\n    }\n  };\n}\n\nfunction speech(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"ask\"\n    }\n  };\n}\n\nfunction promptAndAsk(prompt, prompt_a) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      hist: {\n        type: \"history\"\n      },\n      maxspeech: _objectSpread({}, speech(prompt_a)),\n      ask: {\n        entry: [listen(), send('MAXSPEECH', {\n          delay: 6000\n        })]\n      }\n    }\n  };\n}\n\nconst grammar = {\n  //name \n  \"John\": {\n    person: \"John Smith\"\n  },\n  \"Smith\": {\n    person: \"Smith Wood\"\n  },\n  \"Tom\": {\n    person: \"Tom Cruise\"\n  },\n  \"David\": {\n    person: \"David Johansson\"\n  },\n  \"Emma\": {\n    person: \"Emma Watson\"\n  },\n  \"Eric\": {\n    person: \"Eric Kim\"\n  },\n  \"Alex\": {\n    person: \"Alex Eriksson\"\n  },\n  //day \n  \"on monday\": {\n    day: \"Monday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on friday\": {\n    day: \"Friday\"\n  },\n  \"on saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Saturday\": {\n    day: \"saturday\"\n  },\n  //time \n  \"at one\": {\n    time: \"01:00\"\n  },\n  \"at two\": {\n    time: \"02:00\"\n  },\n  \"at three\": {\n    time: \"03:00\"\n  },\n  \"at four\": {\n    time: \"04:00\"\n  },\n  \"at five\": {\n    time: \"05:00\"\n  },\n  \"at six\": {\n    time: \"06:00\"\n  },\n  \"at seven\": {\n    time: \"07:00\"\n  },\n  \"at eight\": {\n    time: \"08:00\"\n  },\n  \"at nine\": {\n    time: \"09:00\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  },\n  \"at eleven\": {\n    time: \"11:00\"\n  },\n  \"at twelve\": {\n    time: \"12:00\"\n  },\n  \"at thirteen\": {\n    time: \"13:00\"\n  },\n  \"at fourteen\": {\n    time: \"14:00\"\n  },\n  \"at fifteen\": {\n    time: \"15:00\"\n  },\n  \"at sixteen\": {\n    time: \"16:00\"\n  },\n  \"at seventeen\": {\n    time: \"17:00\"\n  },\n  \"at eighteen\": {\n    time: \"18:00\"\n  },\n  \"at nineteen\": {\n    time: \"19:00\"\n  },\n  \"at twenty\": {\n    time: \"20:00\"\n  },\n  \"at twenty one\": {\n    time: \"21:00\"\n  },\n  \"at twenty two\": {\n    time: \"22:00\"\n  },\n  \"at twenty three\": {\n    time: \"23:00\"\n  },\n  \"at twenty four\": {\n    time: \"00:00\"\n  }\n};\nconst grammar2 = {\n  \"yes\": true,\n  \"Yes\": true,\n  \"Of course\": true,\n  \"of course\": true,\n  \"okay\": true,\n  \"Okay\": true,\n  \"No\": false,\n  \"no\": false,\n  \"No way\": false,\n  \"no way\": false\n};\nconst grammar3 = {\n  \"count\": 0\n};\nconst help_commands = {\n  \"help\": \"Help\",\n  \"Help\": \"Help\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"query\",\n          cond: context => !(context.recResult in help_commands),\n          actions: [assign(context => {\n            return {\n              option: context.recResult\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \"welcome_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. What would you like to do?\")),\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000\n          })]\n        }\n      }\n    },\n    welcome_help: _objectSpread({}, help(\"Tell me what you want to do.\", \"welcome\")),\n    query: {\n      invoke: {\n        id: \"rasa\",\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: \"menu\",\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data), cancel(\"maxsp\")] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: \"welcome\",\n          actions: [(context, event) => console.log(event.data), cancel(\"maxsp\")]\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: \"todo\",\n          cond: context => context.option === \"todo\"\n        }, {\n          target: \"timer\",\n          cond: context => context.option === \"timer\"\n        }, {\n          target: \"appointment\",\n          cond: context => context.option === \"appointment\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. You chose \".concat(context.option, \".\")\n          }))\n        },\n        nomatch: {\n          entry: say(\"Sorry, please repeat again.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a to do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create an appointment!\"\n          }))\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"day\",\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"who_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond, Who are you meeting with?\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    who_help: _objectSpread({}, help(\"Please tell me the name of the person you are meeting with.\", \"who\")),\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"day_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. You are meeting \".concat(context.person, \" for the meeting. On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. Which day is your meeting?\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know which day are you talking about\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day_help: _objectSpread({}, help(\"Please tell me which day your meeting is.\", \"day\")),\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"timefixed\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"settime\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"wholeday_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good.on \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond.\")),\n        nomatch: {\n          entry: say(\"Please answer the question.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    wholeday_help: _objectSpread({}, help(\"Please answer the question with yer or no.\", \"wholeday\")),\n    timefixed: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"timefixed_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \"for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. Confirm the meeting schedule.\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    timefixed_help: _objectSpread({}, help(\"Confirm the meeting please.\", \"timefixed\")),\n    settime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          })],\n          target: \"confirm_time\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"settime_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. What time is your meeting?\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    settime_help: _objectSpread({}, help(\"Please tell me what time your meeting is.\", \"settime\")),\n    confirm_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\",\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"confirm_time_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please confirm the meeting schedule.\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_time_help: _objectSpread({}, help(\"Please confirm the meeting schedule\", \"confirm_time\")),\n    Finished: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};\n/* RASA API\n*  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://appointment--app.herokuapp.com/model/parse\";\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: \"POST\",\n  headers: {\n    \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\"\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","help","prompt","name","entry","on","ENDSPEECH","speech","promptAndAsk","prompt_a","initial","states","hist","maxspeech","ask","delay","grammar","person","day","time","grammar2","grammar3","help_commands","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","welcome_help","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","nomatch","todo","timer","appointment","who","who_help","day_help","wholeday","wholeday_help","timefixed","timefixed_help","settime","settime_help","confirm_time","confirm_time_help","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel} = actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction help(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nfunction promptAndAsk(prompt: string, prompt_a:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist : {type: \"history\"},\n            maxspeech: {\n                ...speech(prompt_a)\n            },\n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 6000})]\n            },\n        }})\n}\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n\n    //name \n    \"John\": { person: \"John Smith\" },\n    \"Smith\": { person: \"Smith Wood\" },\n    \"Tom\": { person: \"Tom Cruise\" },\n    \"David\": { person: \"David Johansson\" },\n    \"Emma\": { person: \"Emma Watson\" },\n    \"Eric\": { person: \"Eric Kim\" },\n    \"Alex\": { person: \"Alex Eriksson\" },\n\n    //day \n    \"on monday\" : { day: \"Monday\" },\n    \"on Monday\" : { day: \"Monday\" },\n    \"on tuesday\" : { day: \"Tuesday\" },\n    \"on Tuesday\" : { day: \"Tuesday\" },\n    \"on wednesday\" : { day: \"Wednesday\" },\n    \"on Wednesday\" : { day: \"Wednesday\" },\n    \"on thursday\" : { day: \"Thursday\" },\n    \"on Thursday\" : { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on friday\": { day: \"Friday\" },\n    \"on saturday\" : { day: \"Saturday\"},\n    \"on Saturday\" : { day: \"saturday\"},\n\n\t//time \n\t\"at one\" : { time: \"01:00\" },\n    \"at two\" : { time: \"02:00\" },\n    \"at three\" : { time: \"03:00\"},\n    \"at four\": { time: \"04:00\" },\n    \"at five\": { time: \"05:00\" },\n    \"at six\": { time: \"06:00\" },\n    \"at seven\": { time: \"07:00\" },\n    \"at eight\": { time: \"08:00\" },\n    \"at nine\": { time: \"09:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at thirteen\": { time: \"13:00\" },\n    \"at fourteen\": { time: \"14:00\" },\n    \"at fifteen\": { time: \"15:00\" },\n    \"at sixteen\": { time: \"16:00\" },\n    \"at seventeen\": { time: \"17:00\" },\n    \"at eighteen\": { time: \"18:00\" },\n    \"at nineteen\": { time: \"19:00\" },\n    \"at twenty\": { time: \"20:00\" },\n    \"at twenty one\": { time: \"21:00\" },\n    \"at twenty two\": { time: \"22:00\" },\n    \"at twenty three\": { time: \"23:00\" },\n    \"at twenty four\": { time: \"00:00\" }\n}\n\n\nconst grammar2 : { [index: string]: boolean }= { \n\n                  \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n                  \"okay\": true,\n                  \"Okay\": true,\n                  \"No\": false,\n\t\t\t\t  \"no\" : false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\n\nconst grammar3 ={\"count\": 0}\n\nconst help_commands = {\"help\": \"Help\", \"Help\": \"Help\"}\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in help_commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                },\n\n                {target: \"welcome_help\",\n                cond: (context) => context.recResult in help_commands}], \n                \n\n                MAXSPEECH: [{\n                    target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                    },\n                    {target: \"#root.dm.init\", \n                    cond: (context) => grammar3[\"count\"] > 2, \n                    actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n            states: {        \n                prompt: {\n                entry: say(\"What would you like to do?\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist: {type: \"history\"},\n\n            maxspeech: {\n                ...speech(\"Please respond. What would you like to do?\")\n        },  \n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 5000})]\n            }\n        }   \n    }, \n    \n        welcome_help:{\n            ...help(\"Tell me what you want to do.\", \"welcome\")\n            \n        },\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data), cancel(\"maxsp\")]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: [(context, event) => console.log(event.data), cancel(\"maxsp\")]\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. You chose ${context.option}.`\n                    })),\n        },\n                 nomatch: {\n                    entry: say(\"Sorry, please repeat again.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment!`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"day\",\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { person: grammar[context.recResult].person } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    \n\n                },\n\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in help_commands),\n                 actions: cancel(\"maxsp\")},\n\n                 {target: \"who_help\",\n                 cond: (context) => context.recResult in help_commands}],\n                 \n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n                },\n                maxspeech: {\n                    ...speech(\"Please respond, Who are you meeting with?\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n        who_help:{\n            ...help(\"Please tell me the name of the person you are meeting with.\",\"who\")\n        },\n\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t             actions: [assign((context) => { return { day: grammar[context.recResult].day } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in help_commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"day_help\",\n                cond: (context) => context.recResult in help_commands}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. You are meeting ${context.person} for the meeting. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"Please respond. Which day is your meeting?\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n        day_help:{\n            ...help(\"Please tell me which day your meeting is.\",\"day\")\n        },\n        \n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"timefixed\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"settime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\n\t\t            },\n\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in help_commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"wholeday_help\",\n                    cond: (context) => context.recResult in help_commands}],\n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n                    hist: {type: \"history\"},\n\t\t            ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t            },\n                    maxspeech: {\n                      ...speech(\"Please respond.\")\n                    },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please answer the question.\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            wholeday_help:{\n                ...help(\"Please answer the question with yer or no.\",\"wholeday\")\n            },\n            timefixed: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\",\n                           actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\",\n                           actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t\t\t\t\t   \n\t\t                },\n\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in help_commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"timefixed_help\",\n                        cond: (context) => context.recResult in help_commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n                        hist: {type: \"history\"},\n\t\t                ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t                },\n                        maxspeech: {\n                             ...speech(\"Please respond. Confirm the meeting schedule.\")},\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n                timefixed_help:{\n                    ...help(\"Confirm the meeting please.\",\"timefixed\")\n                },\n\t\t\t\tsettime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: [assign((context) => { return { time: grammar[context.recResult].time } }),assign((context) => { grammar3[\"count\"]=0})],\n\t\t\t\t\t\t\ttarget: \"confirm_time\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in help_commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"settime_help\",\n                        cond: (context) => context.recResult in help_commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n                    hist: {type: \"history\"},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t},\n                maxspeech: {\n                  ...speech(\"Please respond. What time is your meeting?\")\n                },\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n        settime_help:{\n            ...help(\"Please tell me what time your meeting is.\",\"settime\")\n        },\n        \n\t\tconfirm_time: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\",\n                    actions: assign((context) => { grammar3[\"count\"]=0})},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in help_commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"confirm_time_help\",\n                 cond: (context) => context.recResult in help_commands}],\n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n                 hist: {type: \"history\"},\n\t\t\t\t ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\n\t\t\t\t },\n                maxspeech: {\n                 ...speech(\"Please confirm the meeting schedule.\")\n                },        \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n        confirm_time_help:{\n            ...help(\"Please confirm the meeting schedule\",\"confirm_time\")\n        },\n        \n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://appointment--app.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n"]},"metadata":{},"sourceType":"module"}