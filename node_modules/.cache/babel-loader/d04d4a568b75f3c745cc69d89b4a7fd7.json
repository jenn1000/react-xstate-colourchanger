{"ast":null,"code":"import _objectSpread from \"C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport \"./styles.scss\";\nconst cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction help(prompt, name) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: name + \".hist\"\n    }\n  };\n}\n\nfunction speech(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"ask\"\n    }\n  };\n}\n\nfunction promptAndAsk(prompt, prompt_a) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      hist: {\n        type: \"history\"\n      },\n      maxspeech: _objectSpread({}, speech(prompt_a)),\n      ask: {\n        entry: [listen(), send('MAXSPEECH', {\n          delay: 6000\n        })]\n      }\n    }\n  };\n}\n\nconst grammar = {\n  //name of example pokemon \n  \"Pikachu\": {\n    pokemon: \"Pikachu\"\n  },\n  \"Slowking\": {\n    pokemon: \"Slowking\"\n  },\n  \"Mister Mime\": {\n    pokemon: \"Mister Mime\"\n  },\n  //region or real life country \n  \"Uppsala\": {\n    place: \"Uppsala, Sweden\"\n  },\n  \"Göteborg\": {\n    place: \"Göteborg, Sweden\"\n  },\n  \"Stockholm\": {\n    place: \"Stockholm, Sweden\"\n  },\n  //attack or defense\n  \"attack\": {\n    battle: \"Attack!\"\n  },\n  \"Attack\": {\n    battle: \"Attack!\"\n  },\n  \"defense\": {\n    battle: \"Defend!\"\n  },\n  \"Defense\": {\n    battle: \"Defend!\"\n  },\n  \"Defend\": {\n    battle: \"Defend!\"\n  },\n  \"defend\": {\n    battle: \"Defend!\"\n  }\n};\nconst grammar2 = {\n  \"yes\": true,\n  \"Yes\": true,\n  \"Of course\": true,\n  \"of course\": true,\n  \"okay\": true,\n  \"Okay\": true,\n  \"Yup\": true,\n  \"yup\": true,\n  \"Ja\": true,\n  \"ja\": true,\n  \"No\": false,\n  \"no\": false,\n  \"Nej\": false,\n  \"nej\": false,\n  \"No way\": false,\n  \"no way\": false\n};\nconst grammar3 = {\n  \"count\": 0\n};\nconst grammar4 = {\n  \"attack_count\": 2,\n  \"defend_count\": 2\n};\nconst grammar5 = {\n  \"attack_count\": 5,\n  \"defend_count\": 5\n};\nconst help_commands = {\n  \"help\": \"Help\",\n  \"Help\": \"Help\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"query\",\n          cond: context => !(context.recResult in help_commands),\n          actions: [assign(context => {\n            return {\n              option: context.recResult\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \"welcome_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the world of Pokemon. Select your level.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. Select a level.\")),\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000\n          })]\n        }\n      }\n    },\n    welcome_help: _objectSpread({}, help(\"This is Pokemon. Please select your level.\", \"welcome\")),\n    query: {\n      invoke: {\n        id: \"rasa\",\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: \"menu\",\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data), cancel(\"maxsp\")] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: \"welcome\",\n          actions: [(context, event) => console.log(event.data), cancel(\"maxsp\")]\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: \"level_easy\",\n          cond: context => context.option === \"level_easy\"\n        }, {\n          target: \"level_hard\",\n          cond: context => context.option === \"level_hard\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. You chose \".concat(context.option, \".\")\n          }))\n        },\n        nomatch: {\n          entry: say(\"Sorry, please repeat again.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    level_hard: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let\\\"s create a to do item!\"\n          }))\n        }\n      }\n    },\n    // timer: {\n    //     initial: \"prompt\",\n    //     on: { ENDSPEECH: \"init\" },\n    //     states: {\n    //         prompt: {\n    //             entry: send((context) => ({\n    //                 type: \"SPEAK\",\n    //                 value: `Let\"s create a timer!`\n    //             }))\n    //         }}\n    // },\n    level_easy: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"pokemon\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Time to get a pokemon.\"\n          }))\n        }\n      }\n    },\n    pokemon: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"place\",\n          cond: context => \"pokemon\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              pokemon: grammar[context.recResult].pokemon\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"pokemon_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Which Pokemon do you want?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond, which pokemon do you want?\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know that Pokemon.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    pokemon_help: _objectSpread({}, help(\"Please tell me the name of the pokemon you want.\", \"pokemon\")),\n    place: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"place\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              place: grammar[context.recResult].place\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"fight\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"place_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Excellent! \".concat(context.pokemon, \" is your pokemon now. What region do you want to go?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. Which region do you want to go?\")),\n        nomatch: {\n          entry: say(\"Sorry, I don't know which region or place you are talking about\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    place_help: _objectSpread({}, help(\"Please tell me where you want to go.\", \"place\")),\n    fight: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"battle\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"place\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"fight_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"\".concat(context.place, \" is a nice place to fight! Do you want to fight?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond.\")),\n        nomatch: {\n          entry: say(\"Please answer the question.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    fight_help: _objectSpread({}, help(\"Please answer the question with yes or no.\", \"fight\")),\n    battle: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult] === \"Attack!\",\n          target: \"battle\",\n          actions: [assign(context => {\n            grammar4[\"attack_count\"] = grammar4['attack_count'] - 1;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar[context.recResult] === \"Defend!\",\n          target: \"battle\",\n          actions: [assign(context => {\n            grammar4[\"defend_count\"] = grammar4['defend_count'] - 1;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: (context => grammar4[\"attack_count\"] === 2) && (context => grammar4['defend_count'] === 0) || (context => grammar4['attack_count'] === 0) && (context => grammar4['defend_count'] === 2),\n          target: \"lose\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: (context => grammar4['attack_count'] === 1) && (context => grammar4['defend_count'] === 1),\n          target: \"victory\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"battle_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \" Let's fight! Do you want to attack or defend? \"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please, respond. Attack or defend?\")),\n        nomatch: {\n          entry: say(\"Please, repeat it again.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    battle_help: _objectSpread({}, help(\"Select your action! Attack or defend!\", \"battle\")),\n    lose: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"You lost! Try next time! Smell ya later!\")\n        }\n      }\n    },\n    victory: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Congratualtions, you're the new Pokemon League Champion!\")\n        }\n      }\n    }\n  }\n};\n/* RASA API\n*  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://appointment--app.herokuapp.com/model/parse\";\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: \"POST\",\n  headers: {\n    \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\"\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/src/dmAppointment_apply.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","help","prompt","name","entry","on","ENDSPEECH","speech","promptAndAsk","prompt_a","initial","states","hist","maxspeech","ask","delay","grammar","pokemon","place","battle","grammar2","grammar3","grammar4","grammar5","help_commands","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","welcome_help","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","nomatch","level_hard","level_easy","pokemon_help","place_help","fight","fight_help","battle_help","lose","victory","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel} = actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction help(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nfunction promptAndAsk(prompt: string, prompt_a:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist : {type: \"history\"},\n            maxspeech: {\n                ...speech(prompt_a)\n            },\n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 6000})]\n            },\n        }})\n}\n\n\nconst grammar: { [index: string]: { pokemon?: string, place?: string, battle?: string} } = {\n\n    //name of example pokemon \n    \"Pikachu\": { pokemon: \"Pikachu\" },\n    \"Slowking\": { pokemon: \"Slowking\" },\n    \"Mister Mime\": { pokemon: \"Mister Mime\" },\n\n\n    //region or real life country \n    \"Uppsala\" : { place: \"Uppsala, Sweden\" },\n    \"Göteborg\" : { place: \"Göteborg, Sweden\" },\n    \"Stockholm\" : { place: \"Stockholm, Sweden\" },\n\n    //attack or defense\n    \"attack\" : { battle: \"Attack!\"},\n    \"Attack\" : { battle: \"Attack!\"},\n    \"defense\" : { battle: \"Defend!\"},\n    \"Defense\" : { battle: \"Defend!\"},\n    \"Defend\" : { battle: \"Defend!\"},\n    \"defend\" : { battle: \"Defend!\"}\n}\n\n\nconst grammar2 : { [index: string]: boolean }= { \n\n                  \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n                  \"okay\": true,\n                  \"Okay\": true,\n                  \"Yup\": true,\n                  \"yup\": true,\n                  \"Ja\": true,\n                  \"ja\": true,\n                  \"No\": false,\n\t\t\t\t  \"no\" : false,\n                  \"Nej\": false,\n                  \"nej\": false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\n\nconst grammar3 ={ \"count\": 0 }\nconst grammar4 ={ \"attack_count\": 2, \"defend_count\": 2 }\nconst grammar5 = { \"attack_count\": 5, \"defend_count\": 5 }\nconst help_commands = { \"help\": \"Help\", \"Help\": \"Help\" }\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in help_commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                },\n\n                {target: \"welcome_help\",\n                cond: (context) => context.recResult in help_commands}], \n                \n\n                MAXSPEECH: [{\n                    target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                    },\n                    {target: \"#root.dm.init\", \n                    cond: (context) => grammar3[\"count\"] > 2, \n                    actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n\n            states: {        \n                prompt: {\n                entry: say(\"Welcome to the world of Pokemon. Select your level.\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n\n            hist: {type: \"history\"},\n\n            maxspeech: {\n                ...speech(\"Please respond. Select a level.\")\n        },  \n\n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 6000})]\n            }\n        }   \n    }, \n    \n        welcome_help:{\n            ...help(\"This is Pokemon. Please select your level.\", \"welcome\")\n            \n        },\n\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data), cancel(\"maxsp\")]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: [(context, event) => console.log(event.data), cancel(\"maxsp\")]\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"level_easy\", cond: (context) => context.option === \"level_easy\" },\n                    { target: \"level_hard\", cond: (context) => context.option === \"level_hard\" }\n                ]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. You chose ${context.option}.`\n                    })),\n        },\n\n                 nomatch: {\n                    entry: say(\"Sorry, please repeat again.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n        level_hard: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item!`\n                    }))\n                }}\n        },\n        \n        // timer: {\n        //     initial: \"prompt\",\n        //     on: { ENDSPEECH: \"init\" },\n        //     states: {\n        //         prompt: {\n        //             entry: send((context) => ({\n        //                 type: \"SPEAK\",\n        //                 value: `Let\"s create a timer!`\n        //             }))\n        //         }}\n        // },\n        \n        \n         level_easy: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"pokemon\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Time to get a pokemon.`\n                    }))\n                }}\n        },\n\n        pokemon: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"place\",\n                    cond: (context) => \"pokemon\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { pokemon: grammar[context.recResult].pokemon } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    \n\n                },\n\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in help_commands),\n                 actions: cancel(\"maxsp\")},\n\n                 {target: \"pokemon_help\",\n                 cond: (context) => context.recResult in help_commands}],\n                 \n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n\n            states: {\n                prompt: {\n                    entry: say(\"Which Pokemon do you want?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n                },\n                maxspeech: {\n                    ...speech(\"Please respond, which pokemon do you want?\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know that Pokemon.\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n\n        pokemon_help:{\n            ...help(\"Please tell me the name of the pokemon you want.\",\"pokemon\")\n        },\n\n        place: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"place\" in (grammar[context.recResult] || {}),\n\t\t             actions: [assign((context) => { return { place: grammar[context.recResult].place } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"fight\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in help_commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"place_help\",\n                cond: (context) => context.recResult in help_commands}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Excellent! ${context.pokemon} is your pokemon now. What region do you want to go?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"Please respond. Which region do you want to go?\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry, I don't know which region or place you are talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n        place_help:{\n            ...help(\"Please tell me where you want to go.\",\"place\")\n        },\n        \n\t    fight: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"battle\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"place\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\n\t\t            },\n\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in help_commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"fight_help\",\n                    cond: (context) => context.recResult in help_commands}],\n                    \n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                    },\n                    {target: \"#root.dm.init\", \n                    cond: (context) => grammar3[\"count\"] > 2, \n                    actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `${context.place} is a nice place to fight! Do you want to fight?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\n                    hist: {type: \"history\"},\n\t\t            \n                    ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t\t            },\n                    \n                    maxspeech: {\n                      ...speech(\"Please respond.\")\n                    },\n\t\t            \n                    nomatch: {\n\t\t\t            entry: say(\"Please answer the question.\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            \n            fight_help:{\n                ...help(\"Please answer the question with yes or no.\",\"fight\")\n            },\n            \n            battle: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t   cond: (context) => grammar[context.recResult] === \"Attack!\",\n                           target: \"battle\",\n                           actions: [assign((context) => { grammar4[\"attack_count\"]=grammar4['attack_count']-1}),cancel(\"maxsp\")] \n\t\t                },\n                           {\n                            cond: (context) => grammar[context.recResult] === \"Defend!\",\n                           target: \"battle\",\n                           actions: [assign((context) => { grammar4[\"defend_count\"]=grammar4['defend_count']-1}),cancel(\"maxsp\")]\n                           },\n                           { \n                            cond: ((((context) => grammar4[\"attack_count\"] === 2 )&& ((context) => grammar4['defend_count'] === 0)) || ((((context)=> grammar4['attack_count'] === 0)) && ((context)=> grammar4['defend_count']===2))),\n                            target: \"lose\",\n                            actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]} ,\n                            {\n                                cond: (((context) => grammar4['attack_count']=== 1) && ((context) => grammar4['defend_count']===1)),\n                                target: \"victory\",\n                                actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in help_commands),\n                        actions: cancel(\"maxsp\")},\n                        \n                        {target: \"battle_help\",\n                        cond: (context) => context.recResult in help_commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                        actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                        },\n                        {target: \"#root.dm.init\", \n                        cond: (context) => grammar3[\"count\"] > 2, \n                        actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: ` Let's fight! Do you want to attack or defend? `\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\n                        hist: {type: \"history\"},\n\t\t                \n                        ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t\t                },\n\n                        maxspeech: {\n                             ...speech(\"Please, respond. Attack or defend?\")},\n\t\t                \n                        nomatch: {\n\t\t\t                entry: say(\"Please, repeat it again.\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n\n                battle_help:{\n                    ...help(\"Select your action! Attack or defend!\",\"battle\")\n                },\n\n\t\t\tlose: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"You lost! Try next time! Smell ya later!\")\n                         \t}}\t},\n            victory: {\n            initial: \"prompt\",\n                 on: { ENDSPEECH: \"init\" },\n                 states: {\n                     prompt: { entry: say(\"Congratualtions, you're the new Pokemon League Champion!\")\n}\n\t                    }\n\t                }\t    \n                } } \n            )\n\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://appointment--app.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n"]},"metadata":{},"sourceType":"module"}