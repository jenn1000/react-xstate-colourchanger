{"ast":null,"code":"import _objectSpread from \"C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport \"./styles.scss\";\nconst cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [listen(), send('MAXSPEECH', {\n          delay: 4000\n        })]\n      }\n    }\n  };\n}\n\nfunction help(prompt, name) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: name + \".hist\"\n    }\n  };\n}\n\nfunction speech(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"ask\"\n    }\n  };\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Smith\": {\n    person: \"Smith John\"\n  },\n  \"Tom\": {\n    person: \"Tom Smith\"\n  },\n  \"David\": {\n    person: \"David Smith\"\n  },\n  \"Emma\": {\n    person: \"Emma James\"\n  },\n  \"Eric\": {\n    person: \"Eric James\"\n  },\n  \"Alex\": {\n    person: \"Alex James\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at one\": {\n    time: \"01:00\"\n  },\n  \"at two\": {\n    time: \"02:00\"\n  },\n  \"at three\": {\n    time: \"03:00\"\n  },\n  \"at four\": {\n    time: \"04:00\"\n  },\n  \"at five\": {\n    time: \"05:00\"\n  },\n  \"at six\": {\n    time: \"06:00\"\n  },\n  \"at seven\": {\n    time: \"07:00\"\n  },\n  \"at eight\": {\n    time: \"08:00\"\n  },\n  \"at nine\": {\n    time: \"09:00\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  },\n  \"at eleven\": {\n    time: \"11:00\"\n  },\n  \"at twelve\": {\n    time: \"12:00\"\n  },\n  \"at thirteen\": {\n    time: \"13:00\"\n  },\n  \"at fourteen\": {\n    time: \"14:00\"\n  },\n  \"at fifteen\": {\n    time: \"15:00\"\n  },\n  \"at sixteen\": {\n    time: \"16:00\"\n  },\n  \"at seventeen\": {\n    time: \"17:00\"\n  },\n  \"at eighteen\": {\n    time: \"18:00\"\n  },\n  \"at nineteen\": {\n    time: \"19:00\"\n  },\n  \"at twenty\": {\n    time: \"20:00\"\n  },\n  \"at twenty one\": {\n    time: \"21:00\"\n  },\n  \"at twenty two\": {\n    time: \"22:00\"\n  },\n  \"at twenty three\": {\n    time: \"23:00\"\n  },\n  \"at twenty four\": {\n    time: \"00:00\"\n  }\n};\nconst grammar2 = {\n  \"yes\": true,\n  \"of course\": true,\n  \"Absolutely\": true,\n  \"Sounds great\": true,\n  \"yeah sure\": true,\n  \"no\": false,\n  \"No way\": false\n};\nconst grammar3 = {\n  \"count\": 0\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"query\",\n          cond: context => !(context.recResult in commands),\n          actions: assign(context => {\n            return {\n              option: context.recResult\n            };\n          })\n        }, {\n          target: \"help_1\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"welcome.maxspeech1\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        maxspeech1: _objectSpread({}, speech(\"Please respond. What would you like to do?\")),\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 4000\n          })]\n        }\n      }\n    },\n    help1: _objectSpread({}, help(\"If you want a make an appointment, tell me what you want to do\", \"welcome\")),\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: 'menu',\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          target: 'todo',\n          cond: context => context.option === 'todo'\n        }, {\n          target: 'timer',\n          cond: context => context.option === 'timer'\n        }, {\n          target: 'appointment',\n          cond: context => context.option === 'appointment'\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. I see. you chose \".concat(context.option, \".\")\n          }))\n        } //  nomatch: {\n        //     entry: say(\"Sorry, I don't understand\"),\n        //     on: { ENDSPEECH: \"prompt\" }\n\n      }\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create a to do item\"\n          }))\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create a timer\"\n          }))\n        }\n      }\n    },\n    appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let's create an appointment\"\n          }))\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help2\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"who.maxspeech2\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech2: _objectSpread({}, speech(\"Please respond. What would you like to do?\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help2: _objectSpread({}, help(\"Tell me the name\", \"who\")),\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"wholeday\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help3\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"day.maxspeech3\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 4000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech3: _objectSpread({}, speech(\"Please respond. Tell me the day\")),\n        nomatch: {\n          entry: say(\"Sorry, I don't know which day you are talking about\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help3: _objectSpread({}, help(\"Tell me the day\", \"day\")),\n    wholeday: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"timefixed\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"settime\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help4\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"wholeday.maxspeech4\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Appointment is on \".concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 5000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech4: _objectSpread({}, speech(\"Please respond. Would it take the whole day?\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help4: _objectSpread({}, help(\"Tell me if it would take whole day for the meeting\", \"wholeday\")),\n    timefixed: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help5\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"timefixed.maxspeech5\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \"for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 4000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech5: _objectSpread({}, speech(\"Please confirm the meeting schedule.\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help5: _objectSpread({}, help(\"Please confirm the meeting schedule\", \"timefixed\")),\n    settime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"withtime\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help6\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"settime.maxspeech6\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 4000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech6: _objectSpread({}, speech(\"Please respond. Set a time.\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help6: _objectSpread({}, help(\"Please tell me what time the meeting is held\", \"settime\")),\n    withtime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\"\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"who\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"help7\",\n          cond: context => context.recResult in commands\n        }],\n        MAXSPEECH: [{\n          target: \"withtime.maxspeech7\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Good. Do you want to me create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 4000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech7: _objectSpread({}, speech(\"Please respond. Confirm the meeting.\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    help7: _objectSpread({}, help(\"Please confirm the meeting information.\", \"withtime\")),\n    Finished: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};\n/*RASA API*/\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://appointment--app.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/react-xstate-colourchanger'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","promptAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","help","name","speech","grammar","person","day","time","grammar2","grammar3","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","commands","option","MAXSPEECH","hist","maxspeech1","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","todo","timer","appointment","who","maxspeech2","nomatch","help2","maxspeech3","help3","wholeday","maxspeech4","help4","timefixed","maxspeech5","help5","settime","maxspeech6","help6","withtime","maxspeech7","help7","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\n\r\nconst {cancel} = actions\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction promptAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: [listen(), send('MAXSPEECH', {delay: 4000})]\r\n            },\r\n        }})\r\n}\r\n\r\nfunction help(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\r\n    return ({entry: say(prompt),\r\n             on: {ENDSPEECH: name+\".hist\"}})\r\n}\r\n\r\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\r\n    return ({entry: say(prompt),\r\n            on: {ENDSPEECH: \"ask\"\r\n        }})\r\n}\r\n\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Smith\": { person: \"Smith John\" },\r\n    \"Tom\": { person: \"Tom Smith\" },\r\n    \"David\": { person: \"David Smith\" },\r\n    \"Emma\": { person: \"Emma James\" },\r\n    \"Eric\": { person: \"Eric James\" },\r\n    \"Alex\": { person: \"Alex James\" },\r\n\r\n\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\" : { day: \"Thursday\" },\r\n    \"on Friday\" : { day: \"Friday\" },\r\n    \"on Saturday\" : { day: \"Saturday\" },\r\n    \"on Sunday\" : { day: \"Sunday\" },\r\n    \r\n    \"at one\" : { time: \"01:00\" },\r\n    \"at two\" : { time: \"02:00\" },\r\n    \"at three\" : { time: \"03:00\"},\r\n    \"at four\": { time: \"04:00\" },\r\n    \"at five\": { time: \"05:00\" },\r\n    \"at six\": { time: \"06:00\" },\r\n    \"at seven\": { time: \"07:00\" },\r\n    \"at eight\": { time: \"08:00\" },\r\n    \"at nine\": { time: \"09:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"at twelve\": { time: \"12:00\" },\r\n    \"at thirteen\": { time: \"13:00\" },\r\n    \"at fourteen\": { time: \"14:00\" },\r\n    \"at fifteen\": { time: \"15:00\" },\r\n    \"at sixteen\": { time: \"16:00\" },\r\n    \"at seventeen\": { time: \"17:00\" },\r\n    \"at eighteen\": { time: \"18:00\" },\r\n    \"at nineteen\": { time: \"19:00\" },\r\n    \"at twenty\": { time: \"20:00\" },\r\n    \"at twenty one\": { time: \"21:00\" },\r\n    \"at twenty two\": { time: \"22:00\" },\r\n    \"at twenty three\": { time: \"23:00\" },\r\n    \"at twenty four\": { time: \"00:00\" }\r\n}\r\n\r\n\r\nconst grammar2 : { [index: string]: boolean } =\r\n\r\n{ \r\n    \r\n    \"yes\": true,\r\n    \"of course\": true, \r\n    \"Absolutely\": true,\r\n    \"Sounds great\": true,\r\n    \"yeah sure\": true,\r\n    \"no\" : false,\r\n    \"No way\" : false\r\n}\r\n\r\nconst grammar3 = {\"count\": 0}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init:{\r\n            on: {\r\n                CLICK: 'welcome'\r\n                }\r\n             },\r\n\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    target: \"query\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: assign((context) => { return { option: context.recResult } }),\r\n                  \r\n            },\r\n            {target: \"help_1\",\r\n            cond: (context)=> context.recResult in commands}],\r\n            MAXSPEECH: [{target: \"welcome.maxspeech1\",\r\n            cond:(context)=> grammar3[\"count\"] <= 2,\r\n            actions: assign((context)=>{grammar3[\"count\"]=grammar3[\"count\"]+1})\r\n            },{target:\"#root.dm.init\",\r\n            cond: (context) => grammar3[\"count\"] > 2,\r\n            actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n                   \r\n        },\r\n\r\n        states: {\r\n            prompt: {\r\n                entry: say(\"What would you like to do?\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            hist: {type: \"history\"},\r\n                maxspeech1: {\r\n                    ...speech(\"Please respond. What would you like to do?\")\r\n                },\r\n            ask: {\r\n                entry: [listen(), send('MAXSPEECH', {delay: 4000})]\r\n            }\r\n        }\r\n    },\r\n    \r\n    help1: {\r\n        ...help(\"If you want a make an appointment, tell me what you want to do\", \"welcome\")\r\n    },\r\n\r\n    query: {\r\n            invoke: {\r\n            \r\n            id: 'rasa',\r\n            src: (context, event) => nluRequest(context.option),\r\n            onDone: {\r\n                target: 'menu',\r\n                actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\r\n                (context: SDSContext, event: any) => console.log(event.data)]\r\n            },\r\n            onError: {\r\n                target: 'welcome',\r\n                actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n            }\r\n        },\r\n        menu: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                ENDSPEECH: [\r\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\r\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\r\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\r\n                ]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. I see. you chose ${context.option}.`\r\n                    })),\r\n        },\r\n                //  nomatch: {\r\n                //     entry: say(\"Sorry, I don't understand\"),\r\n                //     on: { ENDSPEECH: \"prompt\" }\r\n        } \r\n                \r\n        },\r\n\r\n\r\n        todo: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create a to do item`\r\n                    }))\r\n                }}\r\n        },\r\n        \r\n        timer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create a timer`\r\n                    }))\r\n                }}\r\n        },\r\n        \r\n        \r\n        appointment: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create an appointment`\r\n                    }))\r\n                }}\r\n        },\r\n\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n                    },\r\n\r\n                { target: \".nomatch\",\r\n                cond : (context) => !(context.recResult in commands),\r\n                actions: cancel(\"maxsp\")},\r\n                { target: \"help2\",\r\n                cond: (context) => context.recResult in commands}],\r\n                MAXSPEECH: [{target: \"who.maxspeech2\",\r\n                cond: (context) => grammar3[\"count\"] <= 2,\r\n                actions: assign((context)=> {grammar3[\"count\"]= grammar3[\"count\"]+1})\r\n                }, {target: \"#root.dm.init\",\r\n                cond: (context) => grammar3[\"count\"] > 2,\r\n                actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n            },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                hist: {type: \"history\"},\r\n                ask: {\r\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id:\"maxsp\"})]\r\n                },\r\n                maxspeech2: {\r\n                    ...speech(\"Please respond. What would you like to do?\")\r\n                },\r\n                \r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        help2: {\r\n            ...help(\"Tell me the name\", \"who\")\r\n        },\r\n\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n\t            RECOGNISED: [{\r\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n\t\t            target: \"wholeday\"\r\n                },\t\r\n\r\n\t\t            { target: \".nomatch\" ,\r\n                    cond: (context)=> !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help3\",\r\n                    cond: (context)=> context.recResult in commands}],\r\n                    MAXSPEECH: [{target: \"day.maxspeech3\",\r\n                    cond: (context) => grammar3[\"count\"] <=2,\r\n                    actions: assign((context) => {grammar3[\"count\"]=grammar3[\"count\"]+1})\r\n                    }, {target: \"#root.dm.init\",\r\n                    cond: (context)=> grammar3[\"count\"]> 2,\r\n                    actions: assign((context) => {grammar3[\"count\"]=0})}]\r\n                },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`\r\n                    })),\r\n\t\t            on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                hist:{type:\"history\"},\r\n\t\t        ask: {\r\n\t\t            entry: [listen(), send('MAXSPEECH', {delay:4000, id:\"maxsp\"})]\r\n\t            },\r\n                maxspeech3:{\r\n                    ...speech(\"Please respond. Tell me the day\")\r\n                },\r\n                nomatch: {\r\n\t\t            entry: say(\"Sorry, I don't know which day you are talking about\"),\r\n\t\t            on: { ENDSPEECH: \"prompt\" }\r\n\t            }\t     \r\n            }\r\n        },\r\n\r\n        help3:{\r\n            ...help(\"Tell me the day\", \"day\")\r\n        },\r\n\r\n\t    wholeday:  {\r\n\t\t        initial: \"prompt\",\r\n\t\t        on: {\r\n\t                RECOGNISED: [{\r\n                        cond: (context) => grammar2[context.recResult] === true,\r\n                        target: \"timefixed\"},\r\n\r\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\r\n\t\t\t\t\t\ttarget: \"settime\"},\r\n\r\n\t                { target: \".nomatch\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help4\",\r\n                    cond: (context) => context.recResult in commands}],\r\n                    MAXSPEECH: [{target: \"wholeday.maxspeech4\",\r\n                    cond: (context) => grammar3[\"count\"] <= 2,\r\n                    actions: assign((context) => {grammar3[\"count\"]= grammar3[\"count\"]+1})\r\n                },{target: \"#root.dm.init\",\r\n                cond: (context) => grammar3[\"count\"] >2,\r\n                actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n                    \r\n                },\r\n                \r\n                states: {\r\n\t\t            prompt: {\r\n\t\t\t            entry: send((context) => ({\r\n\t\t\t                type: \"SPEAK\",\r\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\r\n\t\t\t            })),\r\n\t\t\t            on: { ENDSPEECH: \"ask\" }\r\n\t\t            },\r\n                    hist: {type: \"history\"},\r\n\t\t            ask: {\r\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\r\n\t\t            },\r\n                    \r\n                    maxspeech4: {\r\n                        ...speech(\"Please respond. Would it take the whole day?\")\r\n                    },\r\n\r\n\t\t            nomatch: {\r\n\t\t\t            entry: say(\"Please repeat it again\"),\r\n\t\t                on: { ENDSPEECH: \"prompt\" }\r\n\t\t            }\r\n\t\t        }\t     \r\n        },\r\n        \r\n        help4:{\r\n            ...help(\"Tell me if it would take whole day for the meeting\", \"wholeday\")\r\n        },\r\n        timefixed: {\r\n\t\t           initial: \"prompt\",\r\n\r\n\t               on: {\r\n\t\t               RECOGNISED: [{\r\n                        cond: (context) => grammar2[context.recResult] === true,\r\n                        target: \"Finished\"},\r\n                        {\r\n                         cond: (context) => grammar2[context.recResult] === false,\r\n                        target: \"who\"\r\n                        \r\n                     },\r\n                     { target: \".nomatch\",\r\n                     cond: (context) => !(context.recResult in commands),\r\n                     actions: cancel(\"maxsp\")},\r\n                     {target: \"help5\",\r\n                     cond: (context) => context.recResult in commands}],\r\n                     MAXSPEECH: [{target:\"timefixed.maxspeech5\",\r\n                     cond: (context) => grammar3[\"count\"] <= 2,\r\n             actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n             },{target: \"#root.dm.init\", \r\n             cond: (context) => grammar3[\"count\"] > 2, \r\n             actions:assign((context) => { grammar3[\"count\"]=0})}]  \r\n                 },\r\n\t\t            states: {\r\n\t\t                prompt: {\r\n\t\t\t                entry: send((context) => ({\r\n\t\t\t                    type: \"SPEAK\",\r\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n\t\t                },\r\n                        hist:{type: \"history\"},\r\n\t\t                ask: {\r\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t                },\r\n                        maxspeech5: {\r\n                            ...speech(\"Please confirm the meeting schedule.\")\r\n                        },\r\n\r\n\t\t                nomatch: {\r\n\t\t\t                entry: say(\"Please repeat it again\"),\r\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\r\n\t\t                }\r\n                    }\r\n\t        },\r\n            help5: {\r\n                ...help(\"Please confirm the meeting schedule\", \"timefixed\")\r\n            },\r\n\r\n\t\t\tsettime: {\r\n                initial: \"prompt\",\r\n\t\t\t\t\ton: {\r\n\t\t\t\t\t\tRECOGNISED: [{\r\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\r\n\t\t\t\t\t\t\ttarget: \"withtime\"\r\n\t\t\t\t\t\t    },\r\n\r\n\t\t\t\t\t\t    { target: \".nomatch\" ,\r\n                        cond: (context) => !(context.recResult in commands),\r\n                        actions: cancel(\"maxsp\")},\r\n                        {target: \"help6\",\r\n                        cond: (context) => context.recResult in commands}],\r\n                        MAXSPEECH: [{target:\"settime.maxspeech6\",\r\n                        cond: (context) => grammar3[\"count\"] <= 2,\r\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n                },{target: \"#root.dm.init\", \r\n                cond: (context) => grammar3[\"count\"] > 2, \r\n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \r\n\t\t\t\t\t},\r\n                states: {\r\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\r\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\r\n\t\t\t\t\t    },\r\n                        hist: {type: \"history\"},\r\n                        ask: \r\n                    {\r\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t\t\t    },\r\n                    maxspeech6: {\r\n                        ...speech(\"Please respond. Set a time.\")\r\n                    },\r\n\r\n\t\t\t\tnomatch:{\r\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\r\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\r\n\t\t\t\t}}},\r\n\r\n                help6:{\r\n                    ...help(\"Please tell me what time the meeting is held\", \"settime\")\r\n                },\r\n\r\n\r\n\t\twithtime: {\r\n\t\t\tinitial: \"prompt\",\r\n\t\t\ton: {\r\n\t\t\t\tRECOGNISED: [{ \r\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\r\n\t\t\t\t\ttarget: \"Finished\"},\r\n\t\t\t\t\t{\r\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\r\n\t\t\t\t\ttarget: \"who\"\r\n\t\t\t\t    },\r\n                    { target: \".nomatch\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help7\",\r\n                    cond: (context) => context.recResult in commands}],\r\n                    MAXSPEECH: [{target:\"withtime.maxspeech7\",\r\n                    cond: (context) => grammar3[\"count\"] <= 2,\r\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n                    },{target: \"#root.dm.init\", \r\n                    cond: (context) => grammar3[\"count\"] > 2, \r\n                    actions:assign((context) => { grammar3[\"count\"]=0})}] \r\n\t\t\t },\r\n\r\n\t\t\t states: {\r\n\t\t\t\t prompt: {\r\n\t\t\t\t\t entry: send((context) => ({\r\n\t\t\t\t\t\t type: \"SPEAK\",\r\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\r\n\t\t\t\t\t })),\r\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\r\n\t\t\t\t },\r\n                 hist: {type: \"history\"},\r\n                ask: {\r\n                    entry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t\t\t},\r\n                maxspeech7: {\r\n                    ...speech(\"Please respond. Confirm the meeting.\")\r\n                },\r\n\r\n\t\t\t\tnomatch: {\r\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\r\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n\t\t\t}\r\n\t\t},\r\n        help7: {\r\n            ...help(\"Please confirm the meeting information.\", \"withtime\")\r\n        },\r\n\r\n                Finished: \r\n                \r\n                {\r\n\t\t                 initial: \"prompt\",\r\n\t\t                 on: { ENDSPEECH: \"init\" },\r\n\t\t                 states: {\r\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\r\n                            },\r\n\t                    }\r\n\t            }\t    \r\n    }\r\n\r\n})\r\n\r\n\r\n\r\n/*RASA API*/\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://appointment--app.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());"]},"metadata":{},"sourceType":"module"}