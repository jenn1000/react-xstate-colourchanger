{"ast":null,"code":"import _objectSpread from\"C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{send,assign,actions}from\"xstate\";import\"./styles.scss\";const cancel=actions.cancel;function say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}function promptAsk(prompt){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:'ask'}},ask:{entry:[listen(),send('MAXSPEECH',{delay:4000})]}}};}function help(prompt,name){return{entry:say(prompt),on:{ENDSPEECH:name+\".hist\"}};}function speech(prompt){return{entry:say(prompt),on:{ENDSPEECH:\"ask\"}};}const grammar={\"John\":{person:\"John Appleseed\"},\"Smith\":{person:\"Smith John\"},\"Tom\":{person:\"Tom Smith\"},\"David\":{person:\"David Smith\"},\"Emma\":{person:\"Emma James\"},\"Eric\":{person:\"Eric James\"},\"Alex\":{person:\"Alex James\"},\"on Monday\":{day:\"Monday\"},\"on Tuesday\":{day:\"Tuesday\"},\"on Wednesday\":{day:\"Wednesday\"},\"on Thursday\":{day:\"Thursday\"},\"on Friday\":{day:\"Friday\"},\"on Saturday\":{day:\"Saturday\"},\"on Sunday\":{day:\"Sunday\"},\"at one\":{time:\"01:00\"},\"at two\":{time:\"02:00\"},\"at three\":{time:\"03:00\"},\"at four\":{time:\"04:00\"},\"at five\":{time:\"05:00\"},\"at six\":{time:\"06:00\"},\"at seven\":{time:\"07:00\"},\"at eight\":{time:\"08:00\"},\"at nine\":{time:\"09:00\"},\"at ten\":{time:\"10:00\"},\"at eleven\":{time:\"11:00\"},\"at twelve\":{time:\"12:00\"},\"at thirteen\":{time:\"13:00\"},\"at fourteen\":{time:\"14:00\"},\"at fifteen\":{time:\"15:00\"},\"at sixteen\":{time:\"16:00\"},\"at seventeen\":{time:\"17:00\"},\"at eighteen\":{time:\"18:00\"},\"at nineteen\":{time:\"19:00\"},\"at twenty\":{time:\"20:00\"},\"at twenty one\":{time:\"21:00\"},\"at twenty two\":{time:\"22:00\"},\"at twenty three\":{time:\"23:00\"},\"at twenty four\":{time:\"00:00\"}};const grammar2={\"yes\":true,\"of course\":true,\"Absolutely\":true,\"Sounds great\":true,\"yeah sure\":true,\"no\":false,\"No way\":false};const grammar3={\"count\":0};export const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:{initial:\"prompt\",on:{RECOGNISED:[{target:\"query\",cond:context=>!(context.recResult in commands),actions:assign(context=>{return{option:context.recResult};})},{target:\"help_1\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"welcome.maxspeech1\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"What would you like to do?\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},maxspeech1:_objectSpread({},speech(\"Please respond. What would you like to do?\")),ask:{entry:[listen(),send('MAXSPEECH',{delay:4000})]}}},help1:_objectSpread({},help(\"If you want a make an appointment, tell me what you want to do\",\"welcome\")),query:{invoke:{id:'rasa',src:(context,event)=>nluRequest(context.option),onDone:{target:'menu',actions:[assign((context,event)=>{return{option:event.data.intent.name};}),(context,event)=>console.log(event.data)]},onError:{target:'welcome',actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{target:'todo',cond:context=>context.option==='todo'},{target:'timer',cond:context=>context.option==='timer'},{target:'appointment',cond:context=>context.option==='appointment'}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. I see. you chose \".concat(context.option,\".\")}))}//  nomatch: {\n//     entry: say(\"Sorry, I don't understand\"),\n//     on: { ENDSPEECH: \"prompt\" }\n}},todo:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a to do item\"}))}}},timer:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create a timer\"}))}}},appointment:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Let's create an appointment\"}))}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help2\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"who.maxspeech2\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech2:_objectSpread({},speech(\"Please respond. What would you like to do?\")),nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},help2:_objectSpread({},help(\"Tell me the name\",\"who\")),day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:\"wholeday\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help3\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"day.maxspeech3\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK. \".concat(context.person,\". On which day is your meeting?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:4000,id:\"maxsp\"})]},maxspeech3:_objectSpread({},speech(\"Please respond. Tell me the day\")),nomatch:{entry:say(\"Sorry, I don't know which day you are talking about\"),on:{ENDSPEECH:\"prompt\"}}}},help3:_objectSpread({},help(\"Tell me the day\",\"day\")),wholeday:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"timefixed\"},{cond:context=>grammar2[context.recResult]===false,target:\"settime\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help4\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"wholeday.maxspeech4\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good. Appointment is on \".concat(context.day,\". Will it take the whole day?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:5000,id:\"maxsp\"})]},maxspeech4:_objectSpread({},speech(\"Please respond. Would it take the whole day?\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help4:_objectSpread({},help(\"Tell me if it would take whole day for the meeting\",\"wholeday\")),timefixed:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"Finished\"},{cond:context=>grammar2[context.recResult]===false,target:\"who\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help5\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"timefixed.maxspeech5\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good. Do you want to me create an appointment with \".concat(context.person,\" on \").concat(context.day,\"for the whole day?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:4000,id:\"maxsp\"})]},maxspeech5:_objectSpread({},speech(\"Please confirm the meeting schedule.\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help5:_objectSpread({},help(\"Please confirm the meeting schedule\",\"timefixed\")),settime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"withtime\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help6\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"settime.maxspeech6\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:say(\"What time is your meeting\"),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:4000,id:\"maxsp\"})]},maxspeech6:_objectSpread({},speech(\"Please respond. Set a time.\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help6:_objectSpread({},help(\"Please tell me what time the meeting is held\",\"settime\")),withtime:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>grammar2[context.recResult]===true,target:\"Finished\"},{cond:context=>grammar2[context.recResult]===false,target:\"who\"},{target:\".nomatch\",cond:context=>!(context.recResult in commands),actions:cancel(\"maxsp\")},{target:\"help7\",cond:context=>context.recResult in commands}],MAXSPEECH:[{target:\"withtime.maxspeech7\",cond:context=>grammar3[\"count\"]<=2,actions:assign(context=>{grammar3[\"count\"]=grammar3[\"count\"]+1;})},{target:\"#root.dm.init\",cond:context=>grammar3[\"count\"]>2,actions:assign(context=>{grammar3[\"count\"]=0;})}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Good. Do you want to me create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})),on:{ENDSPEECH:\"ask\"}},hist:{type:\"history\"},ask:{entry:[listen(),send('MAXSPEECH',{delay:4000,id:\"maxsp\"})]},maxspeech7:_objectSpread({},speech(\"Please respond. Confirm the meeting.\")),nomatch:{entry:say(\"Please repeat it again\"),on:{ENDSPEECH:\"prompt\"}}}},help7:_objectSpread({},help(\"Please confirm the meeting information.\",\"withtime\")),Finished:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:say(\"Your appointment has been created!\")}}}}};/*RASA API*/const proxyurl=\"https://cors-anywhere.herokuapp.com/\";const rasaurl='https://appointment--app.herokuapp.com/model/parse';const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:'POST',headers:{'Origin':'http://localhost:3000/react-xstate-colourchanger'},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());","map":{"version":3,"sources":["C:/Users/wk789/Documents/school/UU/dialogue/lab5/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","promptAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","help","name","speech","grammar","person","day","time","grammar2","grammar3","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","commands","option","MAXSPEECH","hist","maxspeech1","help1","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","todo","timer","appointment","who","maxspeech2","nomatch","help2","maxspeech3","help3","wholeday","maxspeech4","help4","timefixed","maxspeech5","help5","settime","maxspeech6","help6","withtime","maxspeech7","help7","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\n\r\nconst {cancel} = actions\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction promptAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: [listen(), send('MAXSPEECH', {delay: 4000})]\r\n            },\r\n        }})\r\n}\r\n\r\nfunction help(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\r\n    return ({entry: say(prompt),\r\n             on: {ENDSPEECH: name+\".hist\"}})\r\n}\r\n\r\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\r\n    return ({entry: say(prompt),\r\n            on: {ENDSPEECH: \"ask\"\r\n        }})\r\n}\r\n\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Smith\": { person: \"Smith John\" },\r\n    \"Tom\": { person: \"Tom Smith\" },\r\n    \"David\": { person: \"David Smith\" },\r\n    \"Emma\": { person: \"Emma James\" },\r\n    \"Eric\": { person: \"Eric James\" },\r\n    \"Alex\": { person: \"Alex James\" },\r\n\r\n\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\" : { day: \"Thursday\" },\r\n    \"on Friday\" : { day: \"Friday\" },\r\n    \"on Saturday\" : { day: \"Saturday\" },\r\n    \"on Sunday\" : { day: \"Sunday\" },\r\n    \r\n    \"at one\" : { time: \"01:00\" },\r\n    \"at two\" : { time: \"02:00\" },\r\n    \"at three\" : { time: \"03:00\"},\r\n    \"at four\": { time: \"04:00\" },\r\n    \"at five\": { time: \"05:00\" },\r\n    \"at six\": { time: \"06:00\" },\r\n    \"at seven\": { time: \"07:00\" },\r\n    \"at eight\": { time: \"08:00\" },\r\n    \"at nine\": { time: \"09:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"at twelve\": { time: \"12:00\" },\r\n    \"at thirteen\": { time: \"13:00\" },\r\n    \"at fourteen\": { time: \"14:00\" },\r\n    \"at fifteen\": { time: \"15:00\" },\r\n    \"at sixteen\": { time: \"16:00\" },\r\n    \"at seventeen\": { time: \"17:00\" },\r\n    \"at eighteen\": { time: \"18:00\" },\r\n    \"at nineteen\": { time: \"19:00\" },\r\n    \"at twenty\": { time: \"20:00\" },\r\n    \"at twenty one\": { time: \"21:00\" },\r\n    \"at twenty two\": { time: \"22:00\" },\r\n    \"at twenty three\": { time: \"23:00\" },\r\n    \"at twenty four\": { time: \"00:00\" }\r\n}\r\n\r\n\r\nconst grammar2 : { [index: string]: boolean } =\r\n\r\n{ \r\n    \r\n    \"yes\": true,\r\n    \"of course\": true, \r\n    \"Absolutely\": true,\r\n    \"Sounds great\": true,\r\n    \"yeah sure\": true,\r\n    \"no\" : false,\r\n    \"No way\" : false\r\n}\r\n\r\nconst grammar3 = {\"count\": 0}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init:{\r\n            on: {\r\n                CLICK: 'welcome'\r\n                }\r\n             },\r\n\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    target: \"query\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: assign((context) => { return { option: context.recResult } }),\r\n                  \r\n            },\r\n            {target: \"help_1\",\r\n            cond: (context)=> context.recResult in commands}],\r\n            MAXSPEECH: [{target: \"welcome.maxspeech1\",\r\n            cond:(context)=> grammar3[\"count\"] <= 2,\r\n            actions: assign((context)=>{grammar3[\"count\"]=grammar3[\"count\"]+1})\r\n            },{target:\"#root.dm.init\",\r\n            cond: (context) => grammar3[\"count\"] > 2,\r\n            actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n                   \r\n        },\r\n\r\n        states: {\r\n            prompt: {\r\n                entry: say(\"What would you like to do?\"),\r\n                on: {ENDSPEECH: \"ask\"}\r\n            },\r\n            hist: {type: \"history\"},\r\n                maxspeech1: {\r\n                    ...speech(\"Please respond. What would you like to do?\")\r\n                },\r\n            ask: {\r\n                entry: [listen(), send('MAXSPEECH', {delay: 4000})]\r\n            }\r\n        }\r\n    },\r\n    \r\n    help1: {\r\n        ...help(\"If you want a make an appointment, tell me what you want to do\", \"welcome\")\r\n    },\r\n\r\n    query: {\r\n            invoke: {\r\n            \r\n            id: 'rasa',\r\n            src: (context, event) => nluRequest(context.option),\r\n            onDone: {\r\n                target: 'menu',\r\n                actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\r\n                (context: SDSContext, event: any) => console.log(event.data)]\r\n            },\r\n            onError: {\r\n                target: 'welcome',\r\n                actions: (context, event) => console.log(event.data)\r\n\r\n                }\r\n            }\r\n        },\r\n        menu: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                ENDSPEECH: [\r\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\r\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\r\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\r\n                ]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. I see. you chose ${context.option}.`\r\n                    })),\r\n        },\r\n                //  nomatch: {\r\n                //     entry: say(\"Sorry, I don't understand\"),\r\n                //     on: { ENDSPEECH: \"prompt\" }\r\n        } \r\n                \r\n        },\r\n\r\n\r\n        todo: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create a to do item`\r\n                    }))\r\n                }}\r\n        },\r\n        \r\n        timer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create a timer`\r\n                    }))\r\n                }}\r\n        },\r\n        \r\n        \r\n        appointment: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Let's create an appointment`\r\n                    }))\r\n                }}\r\n        },\r\n\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n                    },\r\n\r\n                { target: \".nomatch\",\r\n                cond : (context) => !(context.recResult in commands),\r\n                actions: cancel(\"maxsp\")},\r\n                { target: \"help2\",\r\n                cond: (context) => context.recResult in commands}],\r\n                MAXSPEECH: [{target: \"who.maxspeech2\",\r\n                cond: (context) => grammar3[\"count\"] <= 2,\r\n                actions: assign((context)=> {grammar3[\"count\"]= grammar3[\"count\"]+1})\r\n                }, {target: \"#root.dm.init\",\r\n                cond: (context) => grammar3[\"count\"] > 2,\r\n                actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n            },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                hist: {type: \"history\"},\r\n                ask: {\r\n                    entry: [listen(), send('MAXSPEECH', {delay: 5000, id:\"maxsp\"})]\r\n                },\r\n                maxspeech2: {\r\n                    ...speech(\"Please respond. What would you like to do?\")\r\n                },\r\n                \r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        help2: {\r\n            ...help(\"Tell me the name\", \"who\")\r\n        },\r\n\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n\t            RECOGNISED: [{\r\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n\t\t            target: \"wholeday\"\r\n                },\t\r\n\r\n\t\t            { target: \".nomatch\" ,\r\n                    cond: (context)=> !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help3\",\r\n                    cond: (context)=> context.recResult in commands}],\r\n                    MAXSPEECH: [{target: \"day.maxspeech3\",\r\n                    cond: (context) => grammar3[\"count\"] <=2,\r\n                    actions: assign((context) => {grammar3[\"count\"]=grammar3[\"count\"]+1})\r\n                    }, {target: \"#root.dm.init\",\r\n                    cond: (context)=> grammar3[\"count\"]> 2,\r\n                    actions: assign((context) => {grammar3[\"count\"]=0})}]\r\n                },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`\r\n                    })),\r\n\t\t            on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                hist:{type:\"history\"},\r\n\t\t        ask: {\r\n\t\t            entry: [listen(), send('MAXSPEECH', {delay:4000, id:\"maxsp\"})]\r\n\t            },\r\n                maxspeech3:{\r\n                    ...speech(\"Please respond. Tell me the day\")\r\n                },\r\n                nomatch: {\r\n\t\t            entry: say(\"Sorry, I don't know which day you are talking about\"),\r\n\t\t            on: { ENDSPEECH: \"prompt\" }\r\n\t            }\t     \r\n            }\r\n        },\r\n\r\n        help3:{\r\n            ...help(\"Tell me the day\", \"day\")\r\n        },\r\n\r\n\t    wholeday:  {\r\n\t\t        initial: \"prompt\",\r\n\t\t        on: {\r\n\t                RECOGNISED: [{\r\n                        cond: (context) => grammar2[context.recResult] === true,\r\n                        target: \"timefixed\"},\r\n\r\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\r\n\t\t\t\t\t\ttarget: \"settime\"},\r\n\r\n\t                { target: \".nomatch\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help4\",\r\n                    cond: (context) => context.recResult in commands}],\r\n                    MAXSPEECH: [{target: \"wholeday.maxspeech4\",\r\n                    cond: (context) => grammar3[\"count\"] <= 2,\r\n                    actions: assign((context) => {grammar3[\"count\"]= grammar3[\"count\"]+1})\r\n                },{target: \"#root.dm.init\",\r\n                cond: (context) => grammar3[\"count\"] >2,\r\n                actions:assign((context) => {grammar3[\"count\"]=0})}]\r\n                    \r\n                },\r\n                \r\n                states: {\r\n\t\t            prompt: {\r\n\t\t\t            entry: send((context) => ({\r\n\t\t\t                type: \"SPEAK\",\r\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\r\n\t\t\t            })),\r\n\t\t\t            on: { ENDSPEECH: \"ask\" }\r\n\t\t            },\r\n                    hist: {type: \"history\"},\r\n\t\t            ask: {\r\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 5000, id: \"maxsp\"})]\r\n\t\t            },\r\n                    \r\n                    maxspeech4: {\r\n                        ...speech(\"Please respond. Would it take the whole day?\")\r\n                    },\r\n\r\n\t\t            nomatch: {\r\n\t\t\t            entry: say(\"Please repeat it again\"),\r\n\t\t                on: { ENDSPEECH: \"prompt\" }\r\n\t\t            }\r\n\t\t        }\t     \r\n        },\r\n        \r\n        help4:{\r\n            ...help(\"Tell me if it would take whole day for the meeting\", \"wholeday\")\r\n        },\r\n        timefixed: {\r\n\t\t           initial: \"prompt\",\r\n\r\n\t               on: {\r\n\t\t               RECOGNISED: [{\r\n                        cond: (context) => grammar2[context.recResult] === true,\r\n                        target: \"Finished\"},\r\n                        {\r\n                         cond: (context) => grammar2[context.recResult] === false,\r\n                        target: \"who\"\r\n                        \r\n                     },\r\n                     { target: \".nomatch\",\r\n                     cond: (context) => !(context.recResult in commands),\r\n                     actions: cancel(\"maxsp\")},\r\n                     {target: \"help5\",\r\n                     cond: (context) => context.recResult in commands}],\r\n                     MAXSPEECH: [{target:\"timefixed.maxspeech5\",\r\n                     cond: (context) => grammar3[\"count\"] <= 2,\r\n             actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n             },{target: \"#root.dm.init\", \r\n             cond: (context) => grammar3[\"count\"] > 2, \r\n             actions:assign((context) => { grammar3[\"count\"]=0})}]  \r\n                 },\r\n\t\t            states: {\r\n\t\t                prompt: {\r\n\t\t\t                entry: send((context) => ({\r\n\t\t\t                    type: \"SPEAK\",\r\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n\t\t                },\r\n                        hist:{type: \"history\"},\r\n\t\t                ask: {\r\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t                },\r\n                        maxspeech5: {\r\n                            ...speech(\"Please confirm the meeting schedule.\")\r\n                        },\r\n\r\n\t\t                nomatch: {\r\n\t\t\t                entry: say(\"Please repeat it again\"),\r\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\r\n\t\t                }\r\n                    }\r\n\t        },\r\n            help5: {\r\n                ...help(\"Please confirm the meeting schedule\", \"timefixed\")\r\n            },\r\n\r\n\t\t\tsettime: {\r\n                initial: \"prompt\",\r\n\t\t\t\t\ton: {\r\n\t\t\t\t\t\tRECOGNISED: [{\r\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\r\n\t\t\t\t\t\t\ttarget: \"withtime\"\r\n\t\t\t\t\t\t    },\r\n\r\n\t\t\t\t\t\t    { target: \".nomatch\" ,\r\n                        cond: (context) => !(context.recResult in commands),\r\n                        actions: cancel(\"maxsp\")},\r\n                        {target: \"help6\",\r\n                        cond: (context) => context.recResult in commands}],\r\n                        MAXSPEECH: [{target:\"settime.maxspeech6\",\r\n                        cond: (context) => grammar3[\"count\"] <= 2,\r\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n                },{target: \"#root.dm.init\", \r\n                cond: (context) => grammar3[\"count\"] > 2, \r\n                actions:assign((context) => { grammar3[\"count\"]=0})}]  \r\n\t\t\t\t\t},\r\n                states: {\r\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\r\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\r\n\t\t\t\t\t    },\r\n                        hist: {type: \"history\"},\r\n                        ask: \r\n                    {\r\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t\t\t    },\r\n                    maxspeech6: {\r\n                        ...speech(\"Please respond. Set a time.\")\r\n                    },\r\n\r\n\t\t\t\tnomatch:{\r\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\r\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\r\n\t\t\t\t}}},\r\n\r\n                help6:{\r\n                    ...help(\"Please tell me what time the meeting is held\", \"settime\")\r\n                },\r\n\r\n\r\n\t\twithtime: {\r\n\t\t\tinitial: \"prompt\",\r\n\t\t\ton: {\r\n\t\t\t\tRECOGNISED: [{ \r\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\r\n\t\t\t\t\ttarget: \"Finished\"},\r\n\t\t\t\t\t{\r\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\r\n\t\t\t\t\ttarget: \"who\"\r\n\t\t\t\t    },\r\n                    { target: \".nomatch\",\r\n                    cond: (context) => !(context.recResult in commands),\r\n                    actions: cancel(\"maxsp\")},\r\n                    {target: \"help7\",\r\n                    cond: (context) => context.recResult in commands}],\r\n                    MAXSPEECH: [{target:\"withtime.maxspeech7\",\r\n                    cond: (context) => grammar3[\"count\"] <= 2,\r\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\r\n                    },{target: \"#root.dm.init\", \r\n                    cond: (context) => grammar3[\"count\"] > 2, \r\n                    actions:assign((context) => { grammar3[\"count\"]=0})}] \r\n\t\t\t },\r\n\r\n\t\t\t states: {\r\n\t\t\t\t prompt: {\r\n\t\t\t\t\t entry: send((context) => ({\r\n\t\t\t\t\t\t type: \"SPEAK\",\r\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\r\n\t\t\t\t\t })),\r\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\r\n\t\t\t\t },\r\n                 hist: {type: \"history\"},\r\n                ask: {\r\n                    entry: [listen(), send('MAXSPEECH', {delay: 4000, id: \"maxsp\"})]\r\n\t\t\t\t},\r\n                maxspeech7: {\r\n                    ...speech(\"Please respond. Confirm the meeting.\")\r\n                },\r\n\r\n\t\t\t\tnomatch: {\r\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\r\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\r\n                    }\r\n\t\t\t}\r\n\t\t},\r\n        help7: {\r\n            ...help(\"Please confirm the meeting information.\", \"withtime\")\r\n        },\r\n\r\n                Finished: \r\n                \r\n                {\r\n\t\t                 initial: \"prompt\",\r\n\t\t                 on: { ENDSPEECH: \"init\" },\r\n\t\t                 states: {\r\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\r\n                            },\r\n\t                    }\r\n\t            }\t    \r\n    }\r\n\r\n})\r\n\r\n\r\n\r\n/*RASA API*/\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://appointment--app.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());"]},"metadata":{},"sourceType":"module"}